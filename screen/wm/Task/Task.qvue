<template>
    <div>
    <q-dialog v-model="task_no_access_alert">
      <q-card class="q-px-sm q-pt-sm" style="width: 300px">
        <q-card-section>
          <div class="text-h5">Alert</div>
        </q-card-section>

        <q-card-section style="font-size: 16px" class="q-pt-none">
          You don't have access to this task.
        </q-card-section>

        <q-card-actions align="right">
          <q-btn flat label="OK" color="primary" v-close-popup />
        </q-card-actions>
      </q-card>
    </q-dialog>
    <q-drawer
            side="right"
            v-model="open_saved_finds_drawer"
            bordered
            overlay
            :width="550"
            :breakpoint="550"
            :content-class="!$q.dark.isActive?'bg-grey-3':'bg-black'"
          >
          <div class="q-pa-sm q-px-md">
                <div class="row">
                    <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                        Saved Finds
                    </div>
                    <div class="col-1">
                        <q-btn flat round dense icon="close" @click="open_saved_finds_drawer=false"></q-btn>
                    </div>
                </div>
                <div class="row q-mt-md q-col-gutter-md cls_task_detail">
                    <div class="col-12 q-pb-lg" v-if="Object.keys(filter_params).length > 1 || (filter_params['orderByField'] != '-workEffortId' && mdl_filter_order_by !== null)">
                           <div class="row">
                                <div class="col-6 q-pb-sm" v-if="mdl_filter_user">
                                    <span class="text-subtitle2">User : </span><span class="text-subtitle2 text-green-8">{{ mdl_filter_user.userFullName }}</span>
                                </div>
                                <div class="col-6 q-pb-sm" v-if="mdl_filter_role">
                                    <span class="text-subtitle2">Role : </span><span class="text-subtitle2 text-green-8">{{ mdl_filter_role.label }}</span>
                                </div>
                                <div class="col-6 q-pb-sm" v-if="mdl_filter_project">
                                    <span class="text-subtitle2">Project : </span><span class="text-subtitle2 text-green-8">{{ mdl_filter_project.workEffortName }}</span>
                                </div>
                                <div class="col-6 q-pb-sm" v-if="mdl_filter_status">
                                    <span class="text-subtitle2">Status : </span><span class="text-subtitle2 text-green-8">{{ getStatusLabel(mdl_filter_status) }}</span>
                                </div>
                                <div class="col-6 q-pb-sm" v-if="mdl_filter_order_by">
                                    <span class="text-subtitle2">Order By : </span><span class="text-subtitle2 text-green-8">{{ mdl_filter_order_by.label }}</span>
                                </div>
                           </div>
                           <div class="row q-mt-sm">
                                <div class="col-8 q-pr-lg">
                                    <q-input  v-model="save_new_find" autofocus square outlined label="Description" style="margin:0;padding:0;background-color:white;" dense>
                                    </q-input>
                                </div>
                                <div class="col-4" style="padding-top:2px;">
                                    <q-btn @click="findOptions()" class="text-blue q-px-sm q-ml-sm text-capitalize" outline dense icon="search" label="Save New Find"></q-btn>
                                </div>
                           </div>
                    </div>
                    <div class="col-12 q-pb-lg text-subtitle2" v-else>
                        No find parameters (or default), choose some in Find Options to save a new find or update existing
                    </div>
                </div>
                <div class="row q-py-sm q-my-lg" v-for="item in saved_find_list">
                    <div class="col-8 q-pr-lg">
                        <q-input  :value="item.description" autofocus square outlined label="Description" style="margin:0;padding:0;background-color:white;" dense>
                        </q-input>
                    </div>
                    <div class="col-4" style="padding-top:2px;">
                        <q-btn @click="searchSavedFind(item)" style="width: 70px" class="text-blue q-px-sm q-ml-sm text-capitalize" outline dense icon="search" label="Find"></q-btn>
                    </div>
                </div>
          </div>
    </q-drawer>
    <q-drawer
            side="right"
            v-model="open_find_options_drawer"
            bordered
            overlay
            :width="550"
            :breakpoint="550"
            :content-class="!$q.dark.isActive?'bg-grey-3':'bg-black'"
          >
          <div class="q-pa-sm q-px-md">
                <div class="row">
                    <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                        Find Options
                    </div>
                    <div class="col-1">
                        <q-btn flat round dense icon="close" @click="open_find_options_drawer=false"></q-btn>
                    </div>
                </div>
                <div class="row q-mt-md q-col-gutter-md cls_task_detail">
                    <div class="col-6">
                        <q-select
                              label="Person"
                              dense
                              outlined
                              v-model="mdl_filter_user"
                              :class="!$q.dark.isActive?'bg-white':''"
                              use-input
                              input-debounce="700"
                              option-value="partyId"
                              option-label="userFullName"
                              :options="assignee_options"
                              @filter="filterFn"
                            >
                              <template v-slot:no-option>
                                <q-item>
                                  <q-item-section class="text-grey">
                                    No results
                                  </q-item-section>
                                </q-item>
                              </template>
                            </q-select>
                    </div>
                    <div class="col-6">
                        <q-select
                            label="Role"
                            dense
                            outlined
                            v-model="mdl_filter_role"
                            use-input
                            :class="!$q.dark.isActive?'bg-white':''"
                            input-debounce="0"
                            option-value="value"
                            option-label="label"
                            :options="role_options"
                            @filter="filterFnRole"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                    </div>
                    <div class="col-6">
                        <q-select
                            label="Project"
                            dense
                            :class="!$q.dark.isActive?'bg-white':''"
                            outlined
                            v-model="mdl_filter_project"
                            use-input
                            input-debounce="0"
                            option-value="workEffortId"
                            option-label="workEffortName"
                            :options="project_options"
                            @filter="filterFnProject"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                    </div>
                    <div class="col-6">
                    <q-select
                            label="Status"
                            dense
                            outlined
                            v-model="mdl_filter_status"
                            :class="!$q.dark.isActive?'bg-white':''"
                            use-input
                            multiple
                            input-debounce="0"
                            option-value="statusId"
                            option-label="description"
                            :options="status_options"
                            @filter="filterFnStatus"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                    </div>
                    <div class="col-6">
                        <q-select
                            label="Order By"
                            dense
                            :class="!$q.dark.isActive?'bg-white':''"
                            outlined
                            v-model="mdl_filter_order_by"
                            use-input
                            input-debounce="0"
                            option-value="value"
                            option-label="label"
                            :options="orderby_options"
                            @filter="filterFnOrderBy"
                          >
                            <template v-slot:no-option>
                              <q-item>
                                <q-item-section class="text-grey">
                                  No results
                                </q-item-section>
                              </q-item>
                            </template>
                          </q-select>
                    </div>
                    <div class="col-12">
                        <q-btn @click="findOptions()" style="width: 140px" class="text-blue q-px-sm q-ml-sm" outline dense icon="search" label="Find"></q-btn>
                        <q-btn @click="resetFind()" style="width: 140px" class="q-px-sm q-ml-sm" outline dense icon="search" label="Clear"></q-btn>
                    </div>
                </div>
                <div class="q-mt-md">

                </div>
          </div>
    </q-drawer>
    <q-drawer
            side="right"
            v-model="open_task_detail"
            bordered
            :width="is_full_screen ? drawer_width : 700"
            :breakpoint="700"
            :content-class="!$q.dark.isActive?'bg-grey-3':''"
          >
            <q-scroll-area :style="'left: ' + (is_full_screen?drawer_left:0) + 'px'" :class="is_full_screen? 'max_width_700': ''" class="fit">
              <div class="q-pa-sm">
                <q-layout v-if="selected_task" view="Lhh lpR fff" container :class="!$q.dark.isActive?'bg-white':''" style="height: 85vh;">
                                    <q-header :class="!$q.dark.isActive?'bg-white text-black':'bg-black text-white'">
                                      <q-toolbar>
                                        <q-btn v-if="no_applicable_for_complete.indexOf(selected_task.statusId) === -1" @click="updateTask('WeComplete')" class="q-px-sm q-ml-sm" outline dense icon="check" label="Mark complete"></q-btn>
                                        <q-chip v-if="no_applicable_for_complete.indexOf(selected_task.statusId) > -1"
                                              :style="'background-color: ' + status_color_map[selected_task.statusId]"
                                              text-color="white"
                                              dense
                                              round
                                            > <span class="q-mr-xs" style="font-size:22px;">●</span> {{getStatusName(selected_task.statusId)}}
                                            </q-chip>
                                        <q-toolbar-title></q-toolbar-title>
                                        <q-btn @click="updateTask()" class="text-blue q-px-sm q-ml-sm" outline dense icon="check" label="Update"></q-btn>
                                        <q-btn flat round dense icon="close" @click="checkUnsavedProgress()"></q-btn>
                                      </q-toolbar>
                                    </q-header>

                                    <q-page-container>
                                      <q-page>
                                        <q-list :class="!$q.dark.isActive?'bg-grey-2':''" bordered>
                                          <q-item class="q-py-xs">
                                            <q-item-section class="q-py-none">
                                              <div style="margin: 0" class="text-weight-bold text-h6">
                                              <span v-if="!is_edit_title">{{selected_task.workEffortName}} <q-btn flat round dense icon="edit" @click="is_edit_title=true"></q-btn></span>
                                              <span v-if="is_edit_title">
                                              <q-input dense outlined v-model="selected_task.workEffortName">
                                                <template v-slot:after>
                                                    <q-btn @click="updateTask()" :disabled="!selected_task.workEffortName" square color="primary" size="md" icon="save" />
                                                  </template>
                                              </q-input>
                                              </span>
                                              </div>
                                            </q-item-section>
                                            <q-item-section side>
                                                <div class="text-grey-7 q-gutter-xs">
                                                    <q-btn v-if="!is_full_screen" flat round dense icon="link" @click="copyTaskLink(selected_task.workEffortId)">
                                                    <q-tooltip content-style="font-size: 12px">Copy task link</q-tooltip>
                                                    </q-btn>
                                                    <q-btn v-if="!is_full_screen" flat round dense icon="fullscreen" @click="fullScreenTask()">
                                                    <q-tooltip content-style="font-size: 12px">Fullscreen</q-tooltip>
                                                    </q-btn>
                                                </div>
                                            </q-item-section>
                                          </q-item>
                                        </q-list>
                                        <div class="q-pa-md" style="padding-bottom: 3px;">
                                          <div class="cls_task_detail row q-col-gutter-md text-grey-7">
                                            <div class="col-6">
                                              <q-select
                                                      label="Assignee"
                                                      dense
                                                      outlined
                                                      v-model="assignee"
                                                      use-input
                                                      input-debounce="700"
                                                      option-value="partyId"
                                                      option-label="userFullName"
                                                      :options="assignee_options"
                                                      @filter="filterFn"
                                                    >
                                                      <template v-slot:no-option>
                                                        <q-item>
                                                          <q-item-section class="text-grey">
                                                            No results
                                                          </q-item-section>
                                                        </q-item>
                                                      </template>
                                                    </q-select>
                                            </div>
                                            <div class="col-6 cls_task_detail">
                                              <q-select
                                                        label="Project"
                                                        dense
                                                        outlined
                                                        v-model="project"
                                                        use-input
                                                        input-debounce="0"
                                                        option-value="workEffortId"
                                                        option-label="workEffortName"
                                                        :options="project_options"
                                                        @filter="filterFnProject"
                                                      >
                                                        <template v-slot:no-option>
                                                          <q-item>
                                                            <q-item-section class="text-grey">
                                                              No results
                                                            </q-item-section>
                                                          </q-item>
                                                        </template>
                                                      </q-select>
                                            </div>
                                            <div class="col-4 cls_task_detail">
                                              <q-select
                                                        label="Status"
                                                        dense
                                                        outlined
                                                        v-model="status"
                                                        use-input
                                                        input-debounce="0"
                                                        option-value="statusId"
                                                        option-label="description"
                                                        :options="status_options"
                                                        @filter="filterFnStatus"
                                                      >
                                                        <template v-slot:no-option>
                                                          <q-item>
                                                            <q-item-section class="text-grey">
                                                              No results
                                                            </q-item-section>
                                                          </q-item>
                                                        </template>
                                                      </q-select>
                                            </div>
                                            <div class="col-4 cls_task_detail">
                                              <q-select
                                                        label="Priority"
                                                        dense
                                                        outlined
                                                        v-model="priority"
                                                        use-input
                                                        input-debounce="0"
                                                        option-value="value"
                                                        option-label="label"
                                                        :options="priority_options"
                                                        @filter="filterFnPriority"
                                                      >
                                                        <template v-slot:no-option>
                                                          <q-item>
                                                            <q-item-section class="text-grey">
                                                              No results
                                                            </q-item-section>
                                                          </q-item>
                                                        </template>
                                                      </q-select>
                                            </div>
                                            <div class="col-4 cls_task_detail">
                                                <q-input label="Due Date" style="margin:0;padding:0;" outlined dense v-model="edit_due_date">
                                                    <template v-slot:append>
                                                      <q-icon name="event" class="cursor-pointer">
                                                        <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                                          <q-date mask="YYYY-MM-DD" v-model="edit_due_date">
                                                            <div class="row items-center justify-end">
                                                              <q-btn v-close-popup label="Close" color="primary" flat />
                                                            </div>
                                                          </q-date>
                                                        </q-popup-proxy>
                                                      </q-icon>
                                                    </template>
                                                  </q-input>
                                            </div>
                                          </div>
                                          <div class="row text-grey-7 q-mt-lg">
                                            <div class="col-12">
                                                <div :class="$q.dark.isActive?'text-white':'text-black'" style="border: 1px solid #c2c2c2;min-height: 150px !important;" id="editor"></div>
                                            </div>
                                          </div>
                                        </div>
                                        <div>
                                         <q-list>
                                            <q-item class="q-my-none q-py-none">
                                            <q-item-section class="q-pt-sm">
                                              <div class="q-gutter-sm">
                                                <span class="text-caption q-mt-sm text-grey-7">Collaborators</span>
                                                <q-chip
                                                    :key="item.partyId"
                                                    v-for="item in collaborator_list"
                                                    removable
                                                    @remove="removeCollaborator(item)"
                                                  >
                                                    <q-avatar dense color="grey">
                                                      {{ getInitials(item.userFullName) }}
                                                    </q-avatar>
                                                    {{ item.userFullName }}
                                                  </q-chip>
                                                <q-btn dense outline rounded color="primary" icon="add" :class="$q.dark.isActive?'text-white':''" class="text-weight-bold">
                                                    <q-popup-proxy ref="collabAdd" transition-show="flip-up" transition-hide="flip-down">
                                                        <div class="q-pa-md">
                                                        <q-select
                                                            dense
                                                              outlined
                                                              v-model="new_collab"
                                                              use-input
                                                              square
                                                              input-debounce="700"
                                                              option-value="partyId"
                                                              option-label="userFullName"
                                                              :options="assignee_options"
                                                              @filter="filterFn"
                                                            >
                                                              <template v-slot:no-option>
                                                                <q-item>
                                                                  <q-item-section class="text-grey">
                                                                    No results
                                                                  </q-item-section>
                                                                </q-item>
                                                              </template>
                                                              <template v-slot:after>
                                                                <q-icon :disabled="!new_collab" color="primary" @click="addCollaborator" name="save" class="cursor-pointer" />
                                                              </template>
                                                            </q-select>
                                                        </div>
                                                      </q-popup-proxy>
                                                </q-btn>
                                              </div>
                                            </q-item-section>
                                          </q-item>
                                        </q-list>
                                        </div>
                                        <div v-if="sel_task_comments.length > 0">
                                            <q-list>
                                            <span :key="comment.communicationEventId" v-for="comment in sel_task_comments">
                                                  <q-item style="border-top: 1px solid #e1dddd;" class="q-my-sm q-pt-md">
                                                    <q-item-section avatar>
                                                      <q-avatar color="primary" text-color="white">
                                                        {{ getInitials(comment.userFullName) }}
                                                      </q-avatar>
                                                    </q-item-section>

                                                    <q-item-section class="q-pl-md">
                                                      <q-item-label class="text-subtitle1">{{ comment.userFullName }} <span
                                                        class="q-pl-sm text-caption text-grey-7">{{ timeSince(comment.entryDate) }}</span></q-item-label>
                                                      <q-item-label v-if="obj_edit_comment.communicationEventId != comment.communicationEventId" class="q-pt-sm" caption><span class="text-weight-medium" v-html="getHtmlForMD(comment.body)"></span>
                                                      </q-item-label>

                                                    </q-item-section>

                                                     <q-item-section side top class="q-pt-none">
                                                         <div>
                                                            <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId != comment.communicationEventId" @click="editComment(comment)" class="text-blue q-px-sm q-ml-sm" flat dense icon="edit"></q-btn>
                                                            <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId" @click="updateComment();" class="text-blue q-px-sm q-ml-sm" outline flat dense icon="save"></q-btn>
                                                            <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId" @click="obj_edit_comment={};" class="text-red q-px-sm q-ml-sm" outline flat dense icon="close"></q-btn>
                                                            <q-btn style="padding: 0;" @click="obj_delete_comment=comment;is_delete_comment=true;" class="text-red q-px-sm q-ml-sm" flat dense icon="delete"></q-btn>
                                                        </div>
                                                     </q-item-section>

                                                  </q-item>
                                                  <div class="comment_section edit_comment_section q-mt-sm q-px-lg" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId">
                                                      <div style="border: 1px solid #c2c2c2;width: 80%" id="editCommentEditor"></div>
                                                    </div>
                                              </span>
                                              </q-list>
                                        </div>

                                        <q-dialog v-model="is_delete_comment" persistent>
                                          <q-card class="q-px-md q-pt-md">
                                            <q-card-section class="row items-center">
                                              <q-avatar size="md" icon="delete" color="primary" text-color="white"></q-avatar>
                                              <span class="q-ml-sm text-h6">Are you sure you want to delete?</span>
                                            </q-card-section>

                                            <q-card-actions align="right">
                                              <q-btn flat label="Cancel" @click="obj_delete_comment={};is_delete_comment=false;" color="primary"></q-btn>
                                              <q-btn flat label="Delete" color="red" @click="deleteComment"></q-btn>
                                            </q-card-actions>
                                          </q-card>
                                        </q-dialog>

                                      </q-page>
                                    </q-page-container>
                                <q-footer :class="!$q.dark.isActive?'bg-grey-2 text-black':'bg-black text-white'" class="comment_section add_comment_section">
                                      <div>
                                        <q-list separator bordered>
                                          <q-item class="q-my-sm">
                                            <q-item-section avatar>
                                              <q-avatar color="primary" text-color="white">
                                                {{ getInitials(logged_in_user.userFullName) }}
                                              </q-avatar>
                                            </q-item-section>
                                            <q-item-section>
                                            <div :class="!$q.dark.isActive?'bg-white':''" style="border: 1px solid #c2c2c2;height: 100px;" id="addCommentEditor"></div>
                                            </q-item-section>
                                          </q-item>
                                          <q-item>
                                          <q-item-section side class="cursor-pointer">
                                                <q-btn class="text-primary" @click="addComment" class="q-px-sm q-ml-sm" outline dense icon="check" label="Add Comment"></q-btn>
                                          </q-item-section>
                                          </q-item>
                                        </q-list>
                                      </div>
                                    </q-footer>
                                  </q-layout>
              </div>
            </q-scroll-area>
          </q-drawer>
          <div v-show="is_main_content_visible">
        <q-item class="q-pa-none q-pt-xs">
              <q-item-section>
                <q-btn
                style="width: 109px;"
            class="custom_btn_dropdown"
            dense
                  split
                  @click="new_task={title: '', assignee: null, project: null, due_date: null};is_add_task=true"
                  color="primary"
                  no-caps
                  icon="add"
                  label="Add Task"
                >
                </q-btn>
              </q-item-section>
              <q-item-section style="display: block;" class="cls_task_detail">

              <q-select
                  label="Select Find"
                  dense
                  rounded
                  outlined
                  v-model="mdl_select_find"
                  option-value="formListFindId"
                  option-label="description"
                  :options="select_find_options"
                  style="margin:0;margin-left:3px;padding:0;width: 160px"
                  class="text-capitalize float-right"
                  @input="searchSelectFind"
                >
                  <template v-slot:no-option>
                    <q-item>
                      <q-item-section class="text-grey">
                        No results
                      </q-item-section>
                    </q-item>
                  </template>
                </q-select>

              <q-btn style="width: 130px;margin-top:6px;" class="text-capitalize float-right" outline rounded dense label="Saved Finds" icon="save" @click="open_saved_finds_drawer=true"></q-btn>
              <q-btn style="width: 130px;margin-top:6px;" class="text-capitalize float-right" outline rounded dense label="Find Options" icon="search" @click="open_find_options_drawer=true"></q-btn>
              <q-btn style="width: 130px;margin-top:6px;" v-if="Object.keys(filter_params).length > 1 || (filter_params['orderByField'] != '-workEffortId' && mdl_filter_order_by !== null)" @click="resetFind()" class="text-capitalize float-right text-red" outline rounded dense icon="close" label="Clear"></q-btn>
              </q-item-section>
            </q-item>
                    <q-card flat class="q-mt-sm">
                      <q-card-section style="padding: 0px;">
                        <q-table
                        bordered
                        flat
                        @request="onPageChange"
                        :wrap-cells="true"
                              :data="task_list"
                              :filter="filter"
                              table-header-class="custom_table_header"
                              :columns="table_columns"
                              row-key="notificationMessageId"
                              separator="cell"
                              dense
                              :pagination.sync="pagination"
                            >
                            <template v-if="is_add_task" v-slot:top-row>
                                <q-tr>
                                  <q-td style="padding: 0">
                                      <q-input class="col-8" v-model="new_task.title" autofocus square outlined style="margin:0;padding:0;" dense>
                                        <template v-slot:before>
                                          <q-icon @click="is_add_task=false" color="red" class="cursor-pointer q-ml-xs" name="close" />
                                        </template>
                                    </q-input>
                                  </q-td>
                                  <q-td class="add_task_cls" style="padding: 0">
                                    <q-select
                                        dense
                                          outlined
                                          v-model="new_task.priority"
                                          use-input
                                          square
                                          input-debounce="0"
                                          option-value="value"
                                          option-label="label"
                                          :options="priority_options"
                                          @filter="filterFnPriority"
                                          style="margin:0;padding:0;width: 100px;"
                                        >
                                          <template v-slot:no-option>
                                            <q-item>
                                              <q-item-section class="text-grey">
                                                No results
                                              </q-item-section>
                                            </q-item>
                                          </template>
                                    </q-select>
                                  </q-td>
                                  <q-td class="add_task_cls" style="padding: 0">
                                      <q-select
                                        square
                                        hide-bottom-space
                                        use-input
                                        dense
                                        outlined
                                        v-model="new_task.project"
                                        input-debounce="0"
                                        option-value="workEffortId"
                                        option-label="workEffortName"
                                        :options="project_options"
                                        @filter="filterFnProject"
                                        style="margin:0;padding:0;"
                                        class="cls_task_detail ellipsis col-4 q-pa-none q-ma-none"
                                      >
                                        <template v-slot:no-option>
                                          <q-item>
                                            <q-item-section class="text-grey">
                                              No results
                                            </q-item-section>
                                          </q-item>
                                        </template>
                                      </q-select>
                                  </q-td>
                                  <q-td style="padding: 0">
                                  <q-select
                                        dense
                                          outlined
                                          v-model="new_task.assignee"
                                          use-input
                                          square
                                          input-debounce="700"
                                          option-value="partyId"
                                          option-label="userFullName"
                                          :options="assignee_options"
                                          @filter="filterFn"
                                          style="margin:0;padding:0;"
                                        >
                                          <template v-slot:no-option>
                                            <q-item>
                                              <q-item-section class="text-grey">
                                                No results
                                              </q-item-section>
                                            </q-item>
                                          </template>
                                        </q-select></q-td>
                                  <q-td>In Planning</q-td>
                                  <q-td style="padding: 0 7px 0 0">
                                      <q-input style="margin:0;padding:0;" square outlined dense v-model="new_task.due_date">
                                        <template v-slot:append>
                                          <q-icon name="event" class="cursor-pointer">
                                            <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                              <q-date mask="YYYY-MM-DD" v-model="new_task.due_date">
                                                <div class="row items-center justify-end">
                                                  <q-btn v-close-popup label="Close" color="primary" flat />
                                                </div>
                                              </q-date>
                                            </q-popup-proxy>
                                          </q-icon>
                                        </template>
                                        <template v-slot:after>
                                          <!--<q-icon @click="addTask" class="text-green" style="cursor: pointer;" class="q-mr-sm" name="check_circle" />-->
                                          <q-btn @click="addTask" :disabled="!new_task.title" square color="primary" size="md" icon="add_task" />
                                        </template>
                                      </q-input>
                                  </q-td>
                                </q-tr>
                              </template>
                            <template v-slot:body-cell-title-text="props">
                                      <q-td :style="'padding:6px;border-left: 5px solid ' + status_color_map[props.row.statusId]" @click="is_full_screen = false;selectTask(props.row)" class="cursor-pointer" :props="props">
                                        <span><q-icon name="check_circle_outline" class="block float-left cursor-pointer text-grey" style="font-size: 22px;" /></span>
                                        <span>{{props.row.workEffortName}}</span>
                                      </q-td>
                                    </template>
                                    <template v-slot:body-cell-priority="props">
                                        <q-td :props="props">
                                          {{props.row.priority}}
                                        </q-td>
                                    </template>
                                <template v-slot:body-cell-duedate="props">
                                      <q-td :props="props">
                                        {{formatDate(props.row.estimatedCompletionDate)}}
                                      </q-td>
                                    </template>
                                    <template v-slot:body-cell-project="props">
                                        <q-td v-if="project_options_master.length > 0" :props="props">
                                            {{getProjectName(props.row.rootWorkEffortId)}}
                                        </q-td>
                                    </template>
                                    <template v-slot:body-cell-person="props">
                                      <q-td :props="props">
                                        <span v-if="props.row.assignToPartyId">{{props.row.assignedUser.userFullName}}
                                            <q-btn class="float-right" outline dense size="sm" round color="primary" icon="person">
                                                <q-popup-proxy @before-show="add_edit_assignee = props.row.assignedUser" transition-show="flip-up" transition-hide="flip-down">
                                                    <div class="q-pa-md">
                                                    <q-select
                                                        dense
                                                          outlined
                                                          v-model="add_edit_assignee"
                                                          use-input
                                                          square
                                                          input-debounce="700"
                                                          option-value="partyId"
                                                          option-label="userFullName"
                                                          :options="assignee_options"
                                                          @filter="filterFn"
                                                        >
                                                          <template v-slot:no-option>
                                                            <q-item>
                                                              <q-item-section class="text-grey">
                                                                No results
                                                              </q-item-section>
                                                            </q-item>
                                                          </template>
                                                          <template v-slot:after>
                                                            <q-icon :disabled="!add_edit_assignee" color="primary" @click="addEditAssignee(props.row.workEffortId)" name="save" class="cursor-pointer" />
                                                          </template>
                                                        </q-select>
                                                    </div>
                                                  </q-popup-proxy>
                                            </q-btn>
                                        </span>
                                        <span v-if="!props.row.assignToPartyId">
                                            <q-btn class="float-right" outline dense size="sm" round color="primary" icon="person">
                                                <q-popup-proxy @before-show="add_edit_assignee=null" transition-show="flip-up" transition-hide="flip-down">
                                                    <div class="q-pa-md">
                                                    <q-select
                                                        dense
                                                          outlined
                                                          v-model="add_edit_assignee"
                                                          use-input
                                                          square
                                                          input-debounce="700"
                                                          option-value="partyId"
                                                          option-label="userFullName"
                                                          :options="assignee_options"
                                                          @filter="filterFn"
                                                        >
                                                          <template v-slot:no-option>
                                                            <q-item>
                                                              <q-item-section class="text-grey">
                                                                No results
                                                              </q-item-section>
                                                            </q-item>
                                                          </template>
                                                          <template v-slot:after>
                                                            <q-icon :disabled="!add_edit_assignee" color="primary" @click="addEditAssignee(props.row.workEffortId)" name="save" class="cursor-pointer" />
                                                          </template>
                                                        </q-select>
                                                    </div>
                                                  </q-popup-proxy>
                                            </q-btn>
                                        </span>
                                      </q-td>
                                    </template>
                                    <template v-slot:body-cell-status="props">
                                      <q-td :props="props">
                                        <q-chip
                                          :style="'background-color: ' + status_color_map[props.row.statusId]"
                                          text-color="white"
                                          dense
                                          round
                                        > <span class="q-mr-xs" style="font-size:22px;">●</span> {{getStatusName(props.row.statusId)}}
                                        </q-chip>
                                      </q-td>
                                    </template>
                            </q-table>
                      </q-card-section>
                    </q-card>
              </div>
    </div>
</template>
<script>
module.exports = {
    data: function () {
        return {
            drawer_width: window.innerWidth,
            drawer_left: (window.innerWidth - 700)/2,
            is_main_content_visible: false,
            logged_in_user: {},
            is_edit_title: false,
            task_list: [],
            pagination: {
                page: 1,
                rowsPerPage: 10,
                rowsNumber: 0,
                sortBy: 'workEffortId',
                descending: true,
              },
            filter_params: {},
            sel_task_comments: [],
            edit_due_date: null,
            selected_task: {},
            open_task_detail: false,
            filter: "",
            new_task_assignee: null,
            add_edit_assignee: null,
            new_task: {title: '', assignee: null, project: null, due_date: null},
            assignee: null,
            priority: null,
            assignee_options: [],
            status: null,
            status_options_master: [],
            task_no_access_alert: false,
            status_options: [],
            project: null,
            project_options_master: [],
            project_options: [],
            is_add_task: false,
            new_collab: null,
            person_mapping: {},
            is_full_screen: false,
            no_applicable_for_complete: ['WeCancelled', 'WeClosed', 'WeComplete', 'WeOnHold'],
            table_columns: [
               {
                 name: 'title-text',
                 field: 'workEffortName',
                 required: true,
                 label: 'Title',
                 align: 'left',
                 sortable: true,
                 style: 'min-width: 300px'
               },
               { name: 'priority', align: 'left', label: 'Priority',style: 'width: 100px', field: 'priority', sortable: true },
               { name: 'project', align: 'left', label: 'Project',style: 'width: 210px', field: 'rootWorkEffortId', sortable: true },
               { name: 'person', align: 'left', label: 'Person',style: 'width: 210px', field: 'assignToPartyId', sortable: true },
               { name: 'status', align: 'left', label: 'Status',style: 'width: 210px', field: 'statusId', sortable: true },
               { name: 'duedate', align: 'left', label: 'Due',style: 'width: 210px', field: 'estimatedCompletionDate', sortable: true }
            ],
            column_to_field_mapping: {"workEffortId": "workEffortId", "title-text": "workEffortName", "priority": "priority", "project": "rootWorkEffortId",
                                        "person": "assignToPartyId", "status":"statusId", "duedate": "estimatedCompletionDate"},
            status_color_map:{WeInPlanning: '#979391', WeApproved: '#6a97ff', WeInProgress: '#f0b057', WeComplete: '#34d391', WeOnHold: '#e8697d',
                               WeClosed: '#79c947', WeCancelled: '#e8a19e'},
            is_edit_comment:false,
            obj_edit_comment:{},
            is_delete_comment:false,
            obj_delete_comment:{},
            collaborator_list: [],
            open_find_options_drawer: false,
            mdl_filter_user:null,
            mdl_filter_project:null,
            mdl_filter_role:null,
            role_options_master: [{"label":"Assignee","value":"Assignee"},{"label":"Collaborator","value":"Collaborator"}],
            role_options: [{"label":"Assignee","value":"Assignee"},{"label":"Collaborator","value":"Collaborator"}],
            priority_options_master: [{"label":"1","value":1},{"label":"2","value":2},{"label":"3","value":3},{"label":"4","value":4},{"label":"5","value":5}],
            priority_options: [{"label":"1","value":1},{"label":"2","value":2},{"label":"3","value":3},{"label":"4","value":4},{"label":"5","value":5}],
            mdl_filter_status:null,
            mdl_filter_order_by:null,
            task_details_current: {"assignee": null,"status": null,"priority": null,"project": null, "edit_due_date": null, "description": null},
            orderby_options_master: [{"label":"Task (Asc)","value":"title-text"},
                                     {"label":"Task (Desc)","value":"-title-text"},
                                     {"label":"User (Asc)","value":"person"},
                                     {"label":"User (Desc)","value":"-person"},
                                     {"label":"Status (Asc)","value":"status"},
                                     {"label":"Status (Desc)","value":"-status"},
                                     {"label":"Due Date (Asc)","value":"duedate"},
                                     {"label":"Due Date(Desc)","value":"-duedate"}],
            orderby_options: [{"label":"Task (Asc)","value":"title-text"},
                                     {"label":"Task (Desc)","value":"-title-text"},
                                     {"label":"User (Asc)","value":"person"},
                                     {"label":"User (Desc)","value":"-person"},
                                     {"label":"Status (Asc)","value":"status"},
                                     {"label":"Status (Desc)","value":"-status"},
                                     {"label":"Due Date (Asc)","value":"duedate"},
                                     {"label":"Due Date(Desc)","value":"-duedate"}],
            open_saved_finds_drawer: false,
            saved_find_list: [],
            save_new_find: '',
            select_find_options:[],
            mdl_select_find: null
        }
    },
    methods: {
        onPageChange (props) {
            let self = this;
            const page = props.pagination.page;
            const rowsNumber = props.pagination.rowsNumber;
            const rowsPerPage = props.pagination.rowsPerPage;
            const sortBy = props.pagination.sortBy;
            const descending = props.pagination.descending;
            if (sortBy) {
                if (descending) {
                    self.filter_params["orderByField"] = "-" + (self.column_to_field_mapping[sortBy] || sortBy);
                }
                else {
                    self.filter_params["orderByField"] = (self.column_to_field_mapping[sortBy] || sortBy);
                }
            }
            else {
                self.filter_params["orderByField"] = "-workEffortId";
            }
            const startRow = (page - 1) * rowsPerPage;
            const fetchCount = rowsPerPage === 0 ? this.pagination.rowsNumber : rowsPerPage;
            if (self.filter_params) {
                var allParams = JSON.parse(JSON.stringify(self.filter_params));
                allParams["pageOffset"] = startRow;
                allParams["pageLimit"] = fetchCount;
                allParams["moquiSessionToken"] = $("#confMoquiSessionToken").val();
            }
            else {
                var allParams = $.extend({pageOffset: startRow, pageLimit: fetchCount ,moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            }
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/tasks", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.pagination.rowsNumber = resp.count;
                    self.task_list = resp.taskList.map(function(item){
                        item["assignedUser"] = null;
                        if (item["assignToPartyId"]) {
                            item["assignedUser"] = {userFullName: item["assignedUserFirstName"]+ " " + item["assignedUserLastName"], partyId: item["assignToPartyId"]};
                        }
                        return item;
                    });
                    self.pagination.page = page;
                    self.pagination.rowsPerPage = rowsPerPage;
                    self.pagination.sortBy = sortBy;
                    self.pagination.descending = descending;
                }
            });
        },
        formatDate (dt) {
            if (dt) {
                dt = new Date(dt);
                return dt.getFullYear() + "-" + String(dt.getMonth()+1).padStart(2, '0') + "-" + String(dt.getDate()).padStart(2, '0');
            }
        },
        getProjectName(id) {
            if (id) {
                let project = this.project_options_master.find(function(item){
                    return item.workEffortId === id;
                });
                if (project) {
                    return project.workEffortName;
                }
            }
        },
        getStatusName(id) {
            if (id) {
                let status_name = this.status_options_master.find(function(item){
                    return item.statusId === id;
                });
                if (status_name) {
                    return status_name.description;
                }
            }
        },
        filterFn(val, update, abort) {
            let self = this;
            if (val.length < 2) {
                abort()
                return
              }
              if (val === '') {
                update(() => {
                    self.assignee_options = [];
                })
                return
              }
              self.getAssigneeList(val.toLowerCase()).then(function(resp){
                update(() => {
                    self.assignee_options = resp.userList;
                })
              });
          },
          filterFnRole (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.role_options = self.role_options_master
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.role_options = self.role_options.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
            })
          },
          filterFnOrderBy (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.orderby_options = self.orderby_options_master
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.orderby_options = self.orderby_options.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
            })
          },
        filterFnStatus (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.status_options = self.status_options_master
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.status_options = self.status_options_master.filter(v => v.description.toLowerCase().indexOf(needle) > -1)
            })
          },
        filterFnProject (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.project_options = self.project_options_master
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.project_options = self.project_options_master.filter(v => v.workEffortName.toLowerCase().indexOf(needle) > -1)
            })
          },
        filterFnPriority (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.priority_options = self.priority_options_master
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.priority_options = self.priority_options.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
            })
          },
        findOptions() {
            let self = this;
            self.filter_params = {};
            if (self.mdl_filter_user) {
                self.filter_params["partyId"] = self.mdl_filter_user.partyId;
            }
            if (self.mdl_filter_project) {
                self.filter_params["rootWorkEffortId"] = self.mdl_filter_project.workEffortId;
            }
            if (self.mdl_filter_role) {
                self.filter_params["roleTypeId"] = self.mdl_filter_role.value;
            }
            if (self.mdl_filter_status && self.mdl_filter_status.length > 0) {
                let status_filters = "";
                self.mdl_filter_status.forEach(function(item){
                    status_filters = status_filters + "," + item.statusId;
                });
                self.filter_params["statusId"] = status_filters.replace(",", "");
            }
            if (self.mdl_filter_order_by) {
                if (self.mdl_filter_order_by.value.startsWith("-")) {
                    self.pagination.sortBy = self.mdl_filter_order_by.value.slice(1);
                    self.pagination.descending = true;
                }
                else {
                    self.pagination.sortBy = self.mdl_filter_order_by.value;
                    self.pagination.descending = false;
                }
            }
            self.pagination.page = 1;
            self.onPageChange({
              pagination: self.pagination,
            });
        },
        resetFind() {
            let self = this;
            self.mdl_filter_user = null;
            self.mdl_filter_project = null;
            self.mdl_filter_role = null;
            self.mdl_filter_status = null;
            self.mdl_filter_order_by = null;
            self.filter_params = {};
            self.mdl_select_find = null;
            self.pagination.sortBy = "workEffortId";
            self.pagination.descending = true;
            self.pagination.page = 1;
            self.onPageChange({
              pagination: self.pagination,
            });
        },
        getHtmlForMD(content) {
            if (content) {
                return this.md_conv.makeHtml(content);
            }
        },
        selectTask (row, is_from_add_task) {
            let self = this;
            self.md_conv = new showdown.Converter({metadata: true});
            if (self.open_task_detail && self.getUnsavedIndicator()){
                self.checkUnsavedProgress(true);
                return;
            }
            self.task_details_current = {"assignee": null,"status": null,"priority": null,"project": null, "edit_due_date": null};
            self.is_edit_title = false;
            self.selected_task = {};
            self.open_task_detail=true;
            var allParams = $.extend({ workEffortId:row.workEffortId, moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/tasks/task", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.selected_task = resp.task;
                    self.selected_task["assignedUser"] = null;
                    if (self.selected_task["assignToPartyId"]) {
                        self.selected_task["assignedUser"] = {userFullName: self.selected_task["assignedUserFirstName"]+ " " + self.selected_task["assignedUserLastName"], partyId: self.selected_task["assignToPartyId"]};
                    }
                    self.edit_due_date = null;
                    if (self.selected_task.estimatedCompletionDate){
                        self.edit_due_date = self.formatDate(self.selected_task.estimatedCompletionDate);
                    }
                    self.assignee = self.selected_task.assignedUser;

                    if (is_from_add_task && self.assignee && self.assignee.partyId != self.logged_in_user.userId) {
                        self.new_collab = {partyId: self.logged_in_user.userId}
                        self.addCollaborator();
                        self.new_collab = null;
                    }

                    self.status = self.status_options_master.find(function(item){
                        return item.statusId === self.selected_task.statusId;
                    });
                    self.priority = self.priority_options_master.find(function(item){
                        return item.value === self.selected_task.priority;
                    });
                    self.project = self.project_options_master.find(function(item){
                        return item.workEffortId === self.selected_task.rootWorkEffortId;
                    });
                    if (self.edit_due_date) {
                        self.task_details_current["edit_due_date"] = JSON.parse(JSON.stringify(self.edit_due_date));
                    }
                    if (self.assignee) {
                        self.task_details_current["assignee"] = JSON.parse(JSON.stringify(self.assignee));
                    }
                    if (self.status) {
                        self.task_details_current["status"] = JSON.parse(JSON.stringify(self.status));
                    }
                    if (self.priority) {
                        self.task_details_current["priority"] = JSON.parse(JSON.stringify(self.priority));
                    }
                    if (self.project) {
                        self.task_details_current["project"] = JSON.parse(JSON.stringify(self.project));
                    }
                    if (document.querySelector('.ck-editor__editable')) {
                        document.querySelector('.ck-editor__editable').ckeditorInstance.destroy();
                    }
                    self.initializeEditor("#editor");
                    if (document.querySelector('.add_comment_section .ck-editor__editable')) {
                        document.querySelector('.add_comment_section .ck-editor__editable').ckeditorInstance.destroy();
                    }
                    self.initializeEditor("#addCommentEditor");
                }
            });
            self.sel_task_comments = [];
            self.getComments(row);
            self.getCollaborators(row);
        },
        initializeEditor(elem) {
            let self = this;
            InlineEditor
            .create( document.querySelector( elem ),
            {
                mention: {
                    dropdownLimit: 100,
                    feeds: [
                        {
                            marker: '@',
                            feed: self.getUsersForEditor,
                            itemRenderer: self.customItemRenderer,
                            minimumCharacters: 2
                        },
                    ]
                }
            })
            .then( editor => {
            self.MentionCustomization(editor);
             if (elem === "#addCommentEditor"){
                 window.add_comment_editor = editor;
             }
             else if (elem === "#editCommentEditor"){
                 window.edit_comment_editor = editor;
                 if (self.obj_edit_comment.body){
                    editor.setData(self.obj_edit_comment.body);
                 }
                 else {
                    editor.setData("");
                 }
             }
             else if (elem === "#editor"){
                 window.editor = editor;
                 if (self.selected_task.description){
                    editor.setData(self.selected_task.description);
                 }
                 else {
                    editor.setData("");
                 }
                 self.task_details_current.description = editor.getData();
             }
         } )
        },
        MentionCustomization( editor ) {
            editor.conversion.for( 'upcast' ).elementToAttribute( {
                view: {
                    name: 'a',
                    key: 'data-mention',
                    classes: 'mention',
                    attributes: {
                        href: true,
                        'data-user-id': true
                    }
                },
                model: {
                    key: 'mention',
                    value: viewItem => {
                        const mentionAttribute = editor.plugins.get( 'Mention' ).toMentionAttribute( viewItem, {
                            // Add any other properties that you need.
                            link: viewItem.getAttribute( 'href' ),
                            userId: viewItem.getAttribute( 'data-user-id' )
                        } );

                        return mentionAttribute;
                    }
                },
                converterPriority: 'high'
            } );

            editor.conversion.for( 'downcast' ).attributeToElement( {
                model: 'mention',
                view: ( modelAttributeValue, { writer } ) => {
                    if ( !modelAttributeValue ) {
                        return;
                    }

                    return writer.createAttributeElement( 'a', {
                        class: 'mention',
                        'data-mention': modelAttributeValue.id,
                        'data-user-id': modelAttributeValue.userId,
                        'href': modelAttributeValue.link
                    }, {
                        priority: 20,
                        id: modelAttributeValue.uid
                    } );
                },
                converterPriority: 'high'
            } );
        },
        addTask () {
            var self = this;
            var allParams = $.extend({ workEffortName: self.new_task.title,
             assignToPartyId: (self.new_task.assignee ? self.new_task.assignee.partyId:null), description: "",
             rootWorkEffortId: (self.new_task.project ? self.new_task.project.workEffortId:null),
             estimatedCompletionDate: self.new_task.due_date,
             priority: (self.new_task.priority ? self.new_task.priority.value:null),
              moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/tasks/addTask", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.is_add_task=false;
                    self.new_task = {title: '', assignee: null, due_date: self.formatDate(new Date())};
                    let new_task_item = {workEffortId: resp.workEffortId};
                    self.selectTask(new_task_item, true);
                    self.pagination.page = 1;
                    self.onPageChange({
                      pagination: self.pagination,
                    });
                }
            });
        },
        updateTask(status) {
            let self = this;
            let params = self.selected_task;
            params["moquiSessionToken"] = $("#confMoquiSessionToken").val();
            params["assignToPartyId"] = (self.assignee ? self.assignee.partyId:null);
            params["rootWorkEffortId"] = (self.project ? self.project.workEffortId:null);
            params["statusId"] = self.status.statusId;
            params["priority"] = (self.priority ? self.priority.value:null);
            if (status) {
                params["statusId"] = status;
            }
            params["description"] = window.editor.getData();
            params["estimatedCompletionDate"] = (self.edit_due_date ? self.edit_due_date:null);
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/tasks/updateTask", headers:{Accept:'application/json'}, data:params,
                error:moqui.handleAjaxError, success:function(resp) {
                    if (status) {
                        self.status = self.status_options_master.find(function(item){
                            return item.statusId === status;
                        });
                    }
                    self.is_edit_title = false;
                    self.task_details_current.description = window.editor.getData();
                    self.task_details_current.edit_due_date = (self.edit_due_date ? self.edit_due_date:null);
                    self.task_details_current.assignee = JSON.parse(JSON.stringify(self.assignee));
                    self.task_details_current.status = self.status_options_master.find(function(item){
                        return item.statusId === params["statusId"];
                    });
                    self.task_details_current.priority = self.priority_options_master.find(function(item){
                        return item.value === params["priority"];
                    });
                    self.task_details_current.project = self.project_options_master.find(function(item){
                        return item.workEffortId === params["rootWorkEffortId"];
                    });
                    self.getCollaborators(self.selected_task);
                    self.onPageChange({
                      pagination: self.pagination,
                    });
                    self.new_collab = {};
                    var mentioned_users = [];
                    var mentionedElements = editor.getData().match(/(?<=\[@)(.*?)(?=\])/g) || [];
                    for (let i=0; i < mentionedElements.length; i++){
                        let user = mentionedElements[i];
                        if (!mentioned_users.includes(user)) {
                            mentioned_users.push(user);
                            if (user in self.person_mapping) {
                                self.new_collab = {partyId: self.person_mapping[user]}
                                self.addCollaborator();
                            }
                        }
                    }
                    self.new_collab = null;
                }
            });
        },
        addEditAssignee(workEffortId) {
            let self = this;
            let params = {};
            params["moquiSessionToken"] = $("#confMoquiSessionToken").val();
            params["workEffortId"] = workEffortId;
            params["assignToPartyId"] = (self.add_edit_assignee ? self.add_edit_assignee.partyId:null);
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/tasks/updateTask", headers:{Accept:'application/json'}, data:params,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.onPageChange({
                      pagination: self.pagination,
                    });
                    $(".q-menu").hide();
                }
            });
        },
        getAssigneeList (search_keyword) {
            var self = this;
            var allParams = $.extend({ term: search_keyword,moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            return $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/users", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError
            });
        },
        getStatuses () {
            var self = this;
            var allParams = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/statuses", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.status_options_master = resp.statusList;
                    self.status_options = resp.statusList;
                    self.checkIfTaskFullView();
                }
            });
        },
        fullScreenTask() {
            let self = this;
            self.is_full_screen = true;
            self.is_main_content_visible = false;
        },
        checkIfTaskFullView() {
            let self = this;
            if (Object.keys(self.$route.query).indexOf("id") > -1) {
                var allParams = $.extend({ workEffortId: self.$route.query.id,moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/tasks/checkAccess", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        if (resp.authorized === "Y") {
                            self.is_full_screen = true;
                            let new_task_item = {workEffortId: self.$route.query.id};
                            self.selectTask(new_task_item);
                        }
                        else {
                            self.task_no_access_alert = true;
                            self.is_main_content_visible = true;
                        }
                    }
                });
            }
            else {
                self.is_main_content_visible = true;
            }
        },
        editComment (comment) {
            let self = this;
            self.obj_edit_comment=comment;
            if (document.querySelector('.edit_comment_section .ck-editor__editable')) {
                document.querySelector('.edit_comment_section .ck-editor__editable').ckeditorInstance.destroy();
            }
            setTimeout( () => {
                self.initializeEditor("#editCommentEditor");
            }, 300 );
        },
        addComment () {
            var self = this;
            var allParams = $.extend({ workEffortId: self.selected_task.workEffortId,
             body: window.add_comment_editor.getData(),moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/comments/addComment", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.getComments(self.selected_task);
                    self.new_collab = {};
                    var mentioned_users = [];
                    var mentionedElements = add_comment_editor.getData().match(/(?<=\[@)(.*?)(?=\])/g) || [];
                    for (let i=0; i < mentionedElements.length; i++){
                        let user = mentionedElements[i];
                        if (!mentioned_users.includes(user)) {
                            mentioned_users.push(user);
                            if (user in self.person_mapping) {
                                self.new_collab = {partyId: self.person_mapping[user]}
                                self.addCollaborator();
                            }
                        }
                    }
                    self.new_collab = null;
                    window.add_comment_editor.setData("");
                }
            });
        },
        getCollaborators(row) {
            var self = this;
            var allParams = $.extend({ workEffortId:row.workEffortId, moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/collaborators", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.collaborator_list = resp.collaboratorList.map(function(item){
                        item["userFullName"] = item["assignedUserFirstName"]+ " " + item["assignedUserLastName"];
                        return item;
                    });
                }
            });
        },
        addCollaborator() {
            var self = this;
            var allParams = $.extend({ workEffortId:self.selected_task.workEffortId, partyId: self.new_collab.partyId, roleTypeId: "Collaborator", moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/collaborators/addCollaborator", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.getCollaborators(self.selected_task);
                    self.$nextTick(function () {
                        self.$refs.collabAdd.hide();
                      });
                    self.new_collab = null;
                }
            });
        },
        removeCollaborator(item) {
            var self = this;
            var allParams = $.extend({ workEffortId:item.workEffortId, partyId: item.partyId, roleTypeId: item.roleTypeId, moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/collaborators/removeCollaborator", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.getCollaborators(self.selected_task);
                }
            });
        },
        getComments(row) {
            var self = this;
            var allParams = $.extend({ workEffortId:row.workEffortId, moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/comments", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.sel_task_comments = resp.commentList.map(function(item){
                        item["userFullName"] = item["assignedUserFirstName"]+ " " + item["assignedUserLastName"];
                        return item;
                    }).reverse();
                }
            });
        },
        updateComment() {
            var self = this;
            var allParams = $.extend({ workEffortId: self.selected_task.workEffortId,
             body: window.edit_comment_editor.getData(),communicationEventId:self.obj_edit_comment.communicationEventId,moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/comments/updateComment", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.obj_edit_comment = {};
                    self.is_edit_comment = false;
                    self.getComments(self.selected_task);
                    self.new_collab = {};
                    var mentioned_users = [];
                    var mentionedElements = edit_comment_editor.getData().match(/(?<=\[@)(.*?)(?=\])/g) || [];
                    for (let i=0; i < mentionedElements.length; i++){
                        let user = mentionedElements[i];
                        if (!mentioned_users.includes(user)) {
                            mentioned_users.push(user);
                            if (user in self.person_mapping) {
                                self.new_collab = {partyId: self.person_mapping[user]}
                                self.addCollaborator();
                            }
                        }
                    }
                    self.new_collab = null;
                }
            });
        },
        deleteComment() {
            var self = this;
            var allParams = $.extend({ workEffortId: self.selected_task.workEffortId,
             communicationEventId:self.obj_delete_comment.communicationEventId,moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/comments/deleteComment", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.obj_delete_comment = {};
                    self.is_delete_comment = false;
                    self.getComments(self.selected_task);
                }
            });
        },
        timeSince(date) {

              var seconds = Math.floor((new Date() - date) / 1000);

              var interval = seconds / 31536000;

              if (interval > 1) {
                return Math.floor(interval) + " year(s) ago";
              }
              interval = seconds / 2592000;
              if (interval > 1) {
                return Math.floor(interval) + " month(s) ago";
              }
              interval = seconds / 86400;
              if (interval > 1) {
                return Math.floor(interval) + " day(s) ago";
              }
              interval = seconds / 3600;
              if (interval > 1) {
                return Math.floor(interval) + " hour(s) ago";
              }
              interval = seconds / 60;
              if (interval > 1) {
                return Math.floor(interval) + " minute(s) ago";
              }
              return Math.floor(seconds) + " second(s) ago";
        },
        fetchLoggedInUser() {
            let self = this;
            var allParams = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/loggedInUser", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.logged_in_user = resp.loggedInUser;
                }
            });
        },
        getInitials(name) {
            if (name) {
                let name_words = name.split(" ").slice(0, 2);
                final_initials = "";
                name_words.forEach(function(item){
                    final_initials += item[0];
                });
                return final_initials.toUpperCase();
            }
        },
        getProjects(name) {
            let self = this;
            var allParams = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/projects", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.project_options_master = resp.projectList;
                    self.project_options = resp.projectList;
                    self.getStatuses();
                }
            });
        },
        getUnsavedIndicator() {
            let self = this;
            let project_changed = false;
            let assignee_changed = false;
            let status_changed = false;
            let priority_changed = false;
            let due_date_changed = false;
            let description_changed = false;
            if ((self.task_details_current.project ? self.task_details_current.project.workEffortId:"") !== (self.project ? self.project.workEffortId:"")){
                project_changed = true;
            }
            if ((self.task_details_current.status ? self.task_details_current.status.statusId:"") !== (self.status ? self.status.statusId:"")){
                status_changed = true;
            }
            if ((self.task_details_current.priority ? self.task_details_current.priority.value:"") !== (self.priority ? self.priority.value:"")){
                priority_changed = true;
            }
            if ((self.task_details_current.assignee ? self.task_details_current.assignee.partyId:"") !== (self.assignee ? self.assignee.partyId:"")){
                assignee_changed = true;
            }
            if (self.task_details_current.edit_due_date !== self.edit_due_date){
                due_date_changed = true;
            }
            if (self.task_details_current.description !== window.editor.getData()){
                description_changed = true;
            }
            return (project_changed || status_changed || priority_changed || assignee_changed || due_date_changed || description_changed)
        },
        checkUnsavedProgress(keep_detail_open) {
            let self = this;

            if (self.getUnsavedIndicator()) {
                self.$q.dialog({
                    title: 'Confirm',
                    message: 'You have unsaved changed. Do you really want to leave?',
                    cancel: {label: "Discard Changes", noCaps: true, outline: true, color: "Black"},
                    ok: {label: "Return to Editing", noCaps: true, outline: true},
                    cancelText: 'Sai',
                    persistent: true
                  }).onCancel(() => {
                    if (!self.is_full_screen) {
                        self.open_task_detail=false;
                    }
                    self.is_full_screen = false;
                    self.is_main_content_visible = true;
                    if (Object.keys(self.$route.query).indexOf("id") > -1) {
                        self.$router.replace(self.$route.path);
                    }
                  })
            }
            else {
                if (!keep_detail_open) {
                    if (!self.is_full_screen) {
                        self.open_task_detail=false;
                    }
                    self.is_full_screen = false;
                    self.is_main_content_visible = true;
                    if (Object.keys(self.$route.query).indexOf("id") > -1) {
                        self.$router.replace(self.$route.path);
                    }
                }
            }
        },
        customItemRenderer( item ) {
            let self = this;
            self.person_mapping[item.name] = item.partyId;
            return item.name;
        },
        getUsersForEditor( queryText ) {
            let self = this;
            return new Promise( resolve => {
                setTimeout( () => {
                    self.getAssigneeList(queryText.toLowerCase()).then(function(resp){
                        let available_users = resp.userList;
                        available_users.map(function(item){
                            item.id = "@" + item.userFullName;
                            item.name = item.userFullName;
                            return item;
                            });
                            const itemsToDisplay = available_users
                            .filter( isItemMatching )
                        resolve( itemsToDisplay );
                    });
                }, 100 );
            } );
            function isItemMatching( item ) {
                const searchString = queryText.toLowerCase();

                return (
                    item.name.toLowerCase().includes( searchString ) ||
                    item.id.toLowerCase().includes( searchString )
                );
            }
        },
        copyTaskLink(task_id) {
            var dummy = document.createElement('input'),
            text = (window.location.href).split("?")[0] + "?id=" + task_id;
            document.body.appendChild(dummy);
            dummy.value = text;
            dummy.select();
            document.execCommand('copy');
            document.body.removeChild(dummy);
            this.$q.notify({
                message: 'Copied task link.',
                position: 'bottom-left',
              })
        },
        getSavedFinds () {
            var self = this;
            var allParms = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val(), treeNodeId:'#' }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/saved_finds", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.saved_find_list = resp.savedFindList;
                    self.select_find_options = resp.savedFindList;
                }
            });
        },
        getStatusLabel(items) {

            var label_str = items.reduce(function(p, c) {
              return p ? p + ', ' + c.description : c.description
            },'');

            return label_str;
        },
        searchSavedFind(selected_item) {
            let self = this;
            self.mdl_filter_user = null;
            self.mdl_filter_project = null;
            self.mdl_filter_role = null;
            self.mdl_filter_status = null;
            self.mdl_filter_order_by = null;
            self.filter_params = {};

            self.mdl_select_find = selected_item;

            if(selected_item.fieldList)
            {
                selected_item.fieldList.map(function(item){
                    if(item.fieldOperator == 'equals')
                    {
                        if(item.fieldName=='partyId')
                        {
                            self.getAssigneeList(item.fieldValue).then(function(resp){
                                    if(resp.userList.length > 0)
                                    {
                                        self.mdl_filter_user = resp.userList[0];;
                                    }
                              });
                              self.filter_params[item.fieldName] = item.fieldValue;
                        }
                        else if(item.fieldName=='roleTypeId')
                        {
                            let filtered_roles = self.role_options_master.filter(function(item_role){ return item_role.value == item.fieldValue});
                            if(filtered_roles.length > 0)
                            {
                                self.mdl_filter_role = filtered_roles[0];
                            }
                            self.filter_params[item.fieldName] = item.fieldValue;
                        }
                        else if(item.fieldName=='rootWorkEffortId')
                        {
                            let filtered_projects = self.project_options_master.filter(function(item_workeffortid){ return item_workeffortid.value == item.fieldValue});
                            if(filtered_projects.length > 0)
                            {
                                self.mdl_filter_project = filtered_projects[0];
                            }
                            self.filter_params[item.fieldName] = item.fieldValue;
                        }
                        else if(item.fieldName=='statusId')
                        {
                            let filtered_status = self.status_options_master.filter(function(item_status){ return item_status.value == item.fieldValue});
                            if(filtered_status.length > 0)
                            {
                                self.mdl_filter_project = filtered_projects;
                            }
                            self.filter_params[item.fieldName] = item.fieldValue;
                        }

                    }
                    return item;
                });
            }

            let order_by_field = selected_item.orderByField.split(",")[0];

            if (order_by_field.startsWith("-")) {
                self.pagination.sortBy = order_by_field.slice(1);
                self.pagination.descending = true;
            }
            else {
                self.pagination.sortBy = order_by_field;
                self.pagination.descending = false;
            }

            self.pagination.page = 1;
            self.onPageChange({
              pagination: self.pagination,
            });
        },
        searchSelectFind(obj) {
            this.searchSavedFind(obj);
        }
    },
    created: function () {
        this.fetchLoggedInUser();
        this.getProjects();
        this.onPageChange({
          pagination: this.pagination,
        });
        this.getSavedFinds();
    }
}
</script>
<style>
    .custom_table_header {
        height: 38px !important;
    }
    .cls_task_detail .q-field__label {
        top: 10px !important;
    }
    .cls_task_detail .q-field--float .q-field__label {
        top: 0px !important;
    }
    .ck-balloon-panel_visible {
        z-index: 10000 !important;
    }
    .add_task_cls .q-field__input {
        min-width: 5px !important;
    }
    body {
        overflow-x: hidden !important;
    }
    .max_width_700 {
        max-width: 700px !important;
    }
    .comment_section .ck-editor__editable_inline {
        min-height: 90px !important;
        height: 90px !important;
    }
    .ck-editor {
        width: 100% !important;
        margin-bottom: 9px !important;
    }
    .ck-editor__editable {
        min-height: 150px !important;
    }
</style>
