<template>
    <div class="row">
        <div class="col-md-3 col-lg-3 col-xs-12 xol-sm-12">
            <q-card class="q-px-md q-py-sm q-ma-md">
                <q-card-section>
                    <div class="text-h6">Page Tree</div>
                    <div @click="page_path=null,tree_nodes_selected=null,getWikiPageInfo()" class="text-h6 q-mt-md text-blue cursor-pointer" v-if="wiki_page_info.wikiSpace">{{wiki_page_info.wikiSpace.description}}
                    </div>
                </q-card-section>
                <q-card-section>
                    <q-tree
                      ref="left_tree"
                      @update:selected="treeNodeSelected"
                      no-connectors
                      :nodes="space_tree_data"
                      node-key="path"
                      :selected.sync="tree_nodes_selected"
                      label-key="name"
                      default-expand-all
                    />
                </q-card-section>
            </q-card>
        </div>
        <div class="col-md-7 col-lg-7 col-xs-12 xol-sm-12">
            <div class="q-mt-md q-ml-md" v-if="wiki_page_info.wikiSpace">
            <span class="text-blue cursor-pointer text-h6" @click="page_path=null,tree_nodes_selected=null,getWikiPageInfo()">{{wiki_page_info.wikiSpace.description}}</span>
              <q-chip class="text-uppercase" dense color="grey" text-color="white">
                {{ wiki_page_info.wikiType }}
              </q-chip>
              <q-chip dense v-if="version" color="primary" text-color="white">
                Version: {{version}}
              </q-chip>
              <q-chip dense v-if="published_version" color="primary" text-color="white">
                Published: {{published_version}}
              </q-chip>
            </div>
            <q-card class="q-px-md q-py-sm q-ma-md">
                <q-card-section v-if="wiki_page_info.wikiSpace && !is_page_present">
                    <div style="display:grid;">
                        <div>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Add" icon="add" @click="show_add_model_partial=true"></q-btn>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Edit" icon="edit" @click="openEditModal({pageText: 'Automatic root page for space ' + wiki_page_info.wikiSpace.wikiSpaceId})"></q-btn>
                           <q-btn v-if="version && version !== published_version" color="blue" class="text-capitalize cursor-pointer float-right" outline dense :label="'Publish Version ' + version" icon="edit" @click="setPublishedVersion"></q-btn>
                        </div>
                    </div>
                    <div>
                        Automatic root page for space {{wiki_page_info.wikiSpace.wikiSpaceId}}
                    </div>
                </q-card-section>
                <q-card-section v-if="page_detail.pageLocation && is_page_present">
                    <div style="display:grid;">
                        <div>
                        <q-btn v-if="tree_nodes_selected && !is_children_present" color="red" class="text-capitalize cursor-pointer float-right" outline dense icon="delete" @click="delete_page = true"></q-btn>
                            <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Add" icon="add" @click="show_add_model_partial=true"></q-btn>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Edit" icon="edit" @click="openEditModal(page_detail)"></q-btn>
                           <q-btn v-if="version && version !== published_version" color="blue" class="text-capitalize cursor-pointer float-right" outline dense :label="'Publish Version ' + version" icon="edit" @click="setPublishedVersion"></q-btn>
                        </div>
                    </div>
                    <div v-if="wiki_page_info.wikiType == 'html'" v-html="page_detail.pageText"></div>
                    <div v-if="wiki_page_info.wikiType == 'md'" v-html="getHtmlForMD(page_detail.pageText)"></div>
                </q-card-section>
            </q-card>
        </div>

        <q-dialog id="edit_editor_id" v-model="show_edit_model" @show="initializeEditor('#editEditor')">
          <q-card class="q-pa-none" style="width: 80vw; max-width: 80vw;">
            <q-card-section>
              <div class="row q-px-md q-py-sm">
                <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                    Edit Page: {{ wiki_page_info.pageName }}
                    <!-- <q-input style="width: 200px;" class="inline-block" outlined dense v-model="wiki_page_info.pageName" label="Page Name" ></q-input>-->
                    <q-input style="width: 200px;" class="inline-block" outlined dense v-model="obj_edit.sequence" label="Sequence" ></q-input>
                </div>
                <div class="col-1">
                    <q-btn flat round dense icon="close" class="float-right" v-close-popup></q-btn>
                </div>
            </div>
            </q-card-section>
            <q-separator></q-separator>

            <q-card-section class="q-ma-md edit_page">
                <div style="border: 1px solid #c2c2c2;" id="editEditor"></div>
            </q-card-section>

            <q-separator></q-separator>
            <q-card-actions class="q-pa-md" align="left">
              <q-btn @click="editPage()" outline dense label="Update" class="text-capitalize q-mb-md" color="primary"></q-btn>
              <q-btn v-close-popup outline dense label="Cancel" class="text-capitalize q-mb-md" color="black"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog v-model="delete_page" persistent>
          <q-card style="max-width: 450px" class="q-pa-md">
            <q-card-section class="row items-center">
              <q-avatar icon="delete" color="red" text-color="white"></q-avatar>
              <span class="q-ml-sm q-mt-md text-medium" style="font-size: 18px;">Are you sure you want to delete this wiki page and all attachments? This cannot be undone.</span>
            </q-card-section>

            <q-card-actions align="right">
              <q-btn outlined label="Cancel" color="grey" v-close-popup></q-btn>
              <q-btn v-if="" outlined label="Delete" color="red" @click="deletePage"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>
        <q-dialog id="add_editor_id" v-model="show_add_model" @show="initializeEditor('#addEditor')">
          <q-card class="q-pa-none" style="width: 80vw; max-width: 80vw;">
            <q-card-section>
              <div class="row q-px-md q-py-sm">
                <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                    Add Page
                    <q-input style="width: 200px;" class="inline-block" outlined dense disable readonly :value="page_path" label="Parent Path" ></q-input>
                    <q-input style="width: 300px;" class="inline-block" outlined dense v-model="new_page_name" label="Page Name" ></q-input>
                    <q-input style="width: 100px;" class="inline-block" outlined dense disable readonly :value="add_wiki_type.value" label="Wiki Type" ></q-input>
                    <q-input style="width: 100px;" class="inline-block" outlined dense v-model="new_page_seq" label="Sequence" ></q-input>
                </div>
                <div class="col-1">
                    <q-btn flat round dense icon="close" class="float-right" v-close-popup></q-btn>
                </div>
            </div>
            </q-card-section>
            <q-separator></q-separator>

            <q-card-section class="q-ma-md edit_page">
                <div style="border: 1px solid #c2c2c2;" id="addEditor"></div>
            </q-card-section>

            <q-separator></q-separator>
            <q-card-actions class="q-pa-md" align="left">
              <q-btn @click="addPage()" outline dense label="Add" class="text-capitalize q-mb-md" color="primary"></q-btn>
              <q-btn v-close-popup outline dense label="Cancel" class="text-capitalize q-mb-md" color="black"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>

        <q-dialog v-model="show_add_model_partial">
          <q-card class="q-pa-none" style="width: 600px">
            <q-card-section>
              <div class="row q-px-md q-py-sm">
                <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                    Add Page
                </div>
                <div class="col-1">
                    <q-btn flat round dense icon="close" class="float-right" v-close-popup></q-btn>
                </div>
            </div>
            </q-card-section>
            <q-separator></q-separator>

            <q-card-section class="q-ma-md edit_page">
                <div class="row">
                    <div class="col-12">
                        <q-input outlined dense disable readonly :value="page_path" label="Parent Path" />
                    </div>
                    <div class="col-12 q-pt-md">
                        <q-select
                              label="Wiki Type"
                              dense
                              outlined
                              v-model="add_wiki_type"
                              :class="!$q.dark.isActive?'bg-white':''"
                              use-input
                              input-debounce="700"
                              option-value="value"
                              option-label="label"
                              :options="wiki_type_options"
                              @filter="filterFnWikiType"
                            >
                              <template v-slot:no-option>
                                <q-item>
                                  <q-item-section class="text-grey">
                                    No results
                                  </q-item-section>
                                </q-item>
                              </template>
                            </q-select>
                    </div>
                </div>
            </q-card-section>

            <q-separator></q-separator>
            <q-card-actions class="q-pa-md" align="left">
              <q-btn @click="openAddPageMain()" outline dense label="Add Page" class="text-capitalize q-mb-md" color="primary"></q-btn>
              <q-btn v-close-popup outline dense label="Cancel" class="text-capitalize q-mb-md" color="black"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>

    </div>
</template>
<script>
module.exports = {
    data: function () {
        return {
            new_page_name: "",
            new_page_seq: "",
            tree_nodes_selected: null,
            space_tree_data: [],
            tree_master_list: [],
            wiki_page_info: {},
            is_page_present: false,
            page_detail: {},
            version: null,
            published_version: null,
            page_path: null,
            show_edit_model: false,
            show_add_model: false,
            obj_edit:{},
            show_add_model_partial:false,
            add_wiki_type:"",
            delete_page: false,
            is_children_present: false,
            wiki_type_options_all: [{'label':'md','value':'md'},{'label':'html','value':'html'}],
            wiki_type_options: [{'label':'md','value':'md'},{'label':'html','value':'html'}]
        }
    },
    methods: {
        openEditModal(item){
            let self = this;
            self.md_conv = new showdown.Converter({metadata: true});
            self.show_edit_model = true;
            self.obj_edit = item;
            if (self.tree_nodes_selected) {
                self.obj_edit["sequence"] = self.tree_master_list.find(function(item){
                    return item.pagePath === self.tree_nodes_selected;
                })["sequenceNum"];
            }
            else {
                self.obj_edit["sequence"] = self.tree_master_list.find(function(item){
                    return Object.keys(item).indexOf('pagePath') === -1;
                })["sequenceNum"];
            }
        },
        openAddPageMain() {
            let self = this;
            self.show_add_model_partial = false;
            self.openAddModal({pageText: null});
        },
        openAddModal(item){
            let self = this;
            self.md_conv = new showdown.Converter({metadata: true});
            self.show_add_model = true;
            self.obj_edit = item;
        },
        initializeEditor(elem) {
            let self = this;
            if (document.querySelector('.edit_page .ck-editor__editable')) {
                document.querySelector('.edit_page .ck-editor__editable').ckeditorInstance.destroy();
            }
            InlineEditor
            .create( document.querySelector( elem ), {})
            .then( editor => {
             if (elem === "#editEditor"){
                 window.edit_editor = editor;
                 if (self.wiki_page_info.wikiType == 'html' && self.obj_edit.pageText){
                    let turndownService = window.TurndownService();
                    editor.setData(turndownService.turndown(self.obj_edit.pageText));
                 }
                 else if (self.wiki_page_info.wikiType == 'md' && self.obj_edit.pageText){
                    editor.setData(self.getHtmlForMD(self.obj_edit.pageText));
                 }
                 else {
                    editor.setData("");
                 }
                $("#edit_editor_id").find('.q-dialog__inner').removeAttr('tabindex');
             }
             else {
                window.add_editor = editor;
                $("#add_editor_id").find('.q-dialog__inner').removeAttr('tabindex');
             }
         } )
        },
        addPage() {
          let self = this;
          var allParams = $.extend({wikiSpaceId: self.wiki_page_info.wikiSpaceId,
                                  parentPath: self.wiki_page_info.pagePath,
                                  pageName: self.new_page_name,
                                  sequenceNum: self.new_page_seq,
                                  wikiType: self.add_wiki_type.value,
                                  moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
          if (self.add_wiki_type.value == 'html') {
            allParams["pageText"] = self.getHtmlForMD(window.add_editor.getData());
          }
          else {
            allParams["pageText"] = window.add_editor.getData();
          }
          $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/updateWikiPage", headers:{Accept:'application/json'}, data:allParams,
              error:moqui.handleAjaxError, success:function(resp) {
                  self.show_add_model = false;
                  self.getWikiSpaceTree();
                  self.page_path = (self.wiki_page_info.pagePath ? (self.wiki_page_info.pagePath + "/"):'') + self.new_page_name;
                  self.tree_nodes_selected = (self.wiki_page_info.pagePath ? (self.wiki_page_info.pagePath + "/"):'') + self.new_page_name;
                  self.getWikiPageInfo();
                  self.new_page_name = "";
                  self.new_page_seq = "";
              }
          });
        },
        editPage() {
          let self = this;
          var allParams = $.extend({wikiSpaceId: self.wiki_page_info.wikiSpaceId,
                                  pagePath: self.wiki_page_info.pagePath,
                                  parentPath: self.wiki_page_info.parentPath,
                                  pageName: self.wiki_page_info.pageName,
                                  wikiType: self.wiki_page_info.wikiType,
                                  sequenceNum: self.obj_edit.sequence,
                                  moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
          if (self.wiki_page_info.wikiType == 'html') {
            allParams["pageText"] = self.getHtmlForMD(window.edit_editor.getData());
          }
          else {
            allParams["pageText"] = window.edit_editor.getData();
          }
          $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/updateWikiPage", headers:{Accept:'application/json'}, data:allParams,
              error:moqui.handleAjaxError, success:function(resp) {
                  self.show_edit_model = false;
                  self.getWikiSpaceTree();
                  self.getWikiPageInfo();
                  self.tree_nodes_selected = self.wiki_page_info.parentPath ? (self.wiki_page_info.parentPath + '/' + self.wiki_page_info.pageName) : self.wiki_page_info.pageName;
              }
          });
        },
        getAssigneeList (search_keyword) {
            var self = this;
            var allParams = $.extend({ term: search_keyword,moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            return $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/users", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError
            });
        },
        findWhere(array, key, value) {
            t = 0;
            while (t < array.length && array[t][key] !== value) { t++; };

            if (t < array.length) {
                return array[t]
            } else {
                return false;
            }
        },
        arrangeIntoTree(paths) {
            let self = this;
            var tree = [];

            for (var i = 0; i < paths.length; i++) {
                var path = paths[i];
                var currentLevel = tree;
                for (var j = 0; j < path.length; j++) {
                    var part = path[j];

                    var existingPath = self.findWhere(currentLevel, 'name', part);

                    if (existingPath) {
                        currentLevel = existingPath.children;
                        currentLevel.map(function(itm){
                            itm["sequence"] = self.tree_master_list.find(function(item){
                                    return item.pagePath === itm.path;
                                })["sequenceNum"];
                            return itm;
                        });
                        currentLevel.sort(function(a, b){
                            if(a['sequence'] > b['sequence']){
                                return 1;
                            }
                            else if(a['sequence'] < b['sequence']) {
                                return -1;
                            }
                            return 0;
                        });
                    } else {
                        node_path = "";
                        for (let i in path) {
                            node_path = node_path + "/" + path[i];
                            if (part === path[i]) {
                                break
                            }
                        }
                        var newPart = {
                            name: part,
                            path: node_path.substring(1),
                            children: [],
                        }
                        currentLevel.push(newPart);
                        currentLevel.map(function(itm){
                            itm["sequence"] = self.tree_master_list.find(function(item){
                                    return item.pagePath === itm.path;
                                })["sequenceNum"];
                            return itm;
                        });
                        currentLevel.sort(function(a, b){
                            if(a['sequence'] > b['sequence']){
                                return 1;
                            }
                            else if(a['sequence'] < b['sequence']) {
                                return -1;
                            }
                            return 0;
                        });
                        currentLevel = newPart.children;
                    }
                }
                currentLevel.map(function(itm){
                    itm["sequence"] = self.tree_master_list.find(function(item){
                            return item.pagePath === itm.path;
                        })["sequenceNum"];
                    return itm;
                });
                currentLevel.sort(function(a, b){
                        if(a['sequence'] > b['sequence']){
                            return 1;
                        }
                        else if(a['sequence'] < b['sequence']) {
                            return -1;
                        }
                        return 0;
                    });
            }
            tree.map(function(itm){
                itm["sequence"] = self.tree_master_list.find(function(item){
                        return item.pagePath === itm.path;
                    })["sequenceNum"];
                return itm;
            });
            tree.sort(function(a, b){
                if(a['sequence'] > b['sequence']){
                    return 1;
                }
                else if(a['sequence'] < b['sequence']) {
                    return -1;
                }
                return 0;
            });
            return tree;
        },
        getWikiSpaceTree() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId:params.wikiSpaceId,
                moquiSessionToken:self.$root.moquiSessionToken }, {});
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getWikiSpaceTree", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.tree_master_list = JSON.parse(JSON.stringify(resp.wikiPageAndUserList));
                        let result = JSON.parse(JSON.stringify(resp.wikiPageAndUserList)).sort(function(a, b){
                            if(a['sequenceNum'] > b['sequenceNum']){
                                return 1;
                            }
                            else if(a['sequenceNum'] < b['sequenceNum']) {
                                return -1;
                            }
                            return 0;
                        });
                        let paths = [];
                        result.forEach(function(item){
                            if (item.pagePath) {
                                paths.push(item.pagePath.split("/"));
                            }
                        });
                        let final_result = self.arrangeIntoTree(paths);
                        self.space_tree_data = final_result;
                        self.$nextTick(function () {
                            self.$refs.left_tree.expandAll();
                          })
                    }
                });
            }
        },
        getWikiPageInfo() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId, moquiSessionToken:self.$root.moquiSessionToken }, {});
                if (self.page_path) {
                    allParams["pagePath"] = self.page_path;
                }
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getWikiPageInfoById", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.wiki_page_info = resp;
                        if ('wikiPageId' in self.wiki_page_info) {
                            self.is_page_present = true;
                            self.version = self.wiki_page_info.currentVersionName;
                            self.published_version = self.wiki_page_info.publishedVersionName;
                            setTimeout( () => {
                                self.getPublishedWikiPageText();
                            }, 500 );
                        }
                    }
                });
            }
        },
        setPublishedVersion() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId, publishedVersionName: self.version,
                    wikiPageId: self.wiki_page_info.wikiPageId, moquiSessionToken:self.$root.moquiSessionToken }, {});
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/setPublishedVersion", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.published_version = JSON.parse(JSON.stringify(self.version));
                        self.$q.notify({
                            message: 'New version published successfully.',
                            position: 'bottom-right',
                          });
                    }
                });
            }
        },
        deletePage() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId, pagePath: self.page_path, moquiSessionToken:self.$root.moquiSessionToken }, {});
                $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/deleteWikiPage", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.$q.notify({
                            message: 'Page deleted successfully.',
                            position: 'bottom-right',
                          });
                        self.delete_page = false;
                        self.getWikiSpaceTree();
                        self.getWikiPageInfo();
                    }
                });
            }
        },
        getHtmlForMD(content) {
            if (content) {
                return this.md_conv.makeHtml(content);
            }
        },
        treeNodeSelected(path) {
            this.page_path = path;
            this.page_detail = {};
            let children = this.$refs.left_tree.getNodeByKey(path).children;
            if (children.length == 0) {
                this.is_children_present = false;
            }
            else {
                this.is_children_present = true;
            }
            this.getWikiPageInfo();
        },
        getPublishedWikiPageText() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                self.md_conv = new showdown.Converter({metadata: true});
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId,
                moquiSessionToken:self.$root.moquiSessionToken }, {});
                if (self.version) {
                    allParams["versionName"] = self.version;
                }
                if (self.page_path) {
                    allParams["pagePath"] = self.page_path;
                }
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getPublishedWikiPageText", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.page_detail = resp;
                    }
                });
            }
        },
        filterFnWikiType (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.wiki_type_options = self.wiki_type_options_all
                })
                return
              }
              update(() => {
                  const needle = val.toLowerCase()
                  this.wiki_type_options = self.wiki_type_options.filter(v => v.label.toLowerCase().indexOf(needle) > -1)
                })
          },
    },
    created: function () {
        this.getWikiSpaceTree();
        this.getWikiPageInfo();
    }
}
</script>
<style>
    .custom_table_header {
        height: 45px !important;
    }
    .cls_space .q-field__label {
        top: 10px !important;
    }
    .cls_space .q-field--float .q-field__label {
        top: 0px !important;
    }
    .ck-editor__editable_inline {
        min-height: 57vh !important;
        height: 57vh !important;
    }
    .ck-editor {
        width: 100% !important;
        margin-bottom: 9px !important;
    }
    .ck-editor__editable {
        min-height: 150px !important;
    }
    .ck-balloon-panel_visible {
        z-index: 10000 !important;
    }
    .q-field__label {
        top: 10px !important;
    }
    .q-field--float .q-field__label {
        top: 0px !important;
    }
</style>
