<template>
    <div class="row">
        <div class="col-md-3 col-lg-3 col-xs-12 xol-sm-12">
            <q-card class="q-px-md q-py-sm q-ma-md">
                <q-card-section>
                    <div class="text-h6">Page Tree</div>
                    <div @click="page_path=null,tree_nodes_selected=null,getWikiPageInfo()" class="text-h6 q-mt-md text-blue cursor-pointer" v-if="wiki_page_info.wikiSpace">{{wiki_page_info.wikiSpace.description}}
                    </div>
                </q-card-section>
                <q-card-section>
                    <q-tree
                      ref="left_tree"
                      @update:selected="treeNodeSelected"
                      no-connectors
                      :nodes="space_tree_data"
                      node-key="path"
                      :selected.sync="tree_nodes_selected"
                      label-key="name"
                      default-expand-all
                    />
                </q-card-section>
            </q-card>
        </div>
        <div class="col-md-7 col-lg-7 col-xs-12 xol-sm-12">
            <div class="q-mt-md q-ml-md" v-if="wiki_page_info.wikiSpace">
            <span class="text-blue cursor-pointer text-h6" @click="page_path=null,tree_nodes_selected=null,getWikiPageInfo()">{{wiki_page_info.wikiSpace.description}}</span>
              <q-chip class="text-uppercase" dense color="grey" text-color="white">
                {{ wiki_page_info.wikiType }}
              </q-chip>
              <q-chip dense v-if="version" color="primary" text-color="white">
                Version: {{version}}
              </q-chip>
              <q-chip dense v-if="published_version" color="primary" text-color="white">
                Published: {{published_version}}
              </q-chip>
            </div>
            <q-card class="q-px-md q-py-sm q-ma-md">
                <q-card-section v-if="wiki_page_info.wikiSpace && !is_page_present">
                    <div style="display:grid;">
                        <div>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Add" icon="add" @click="openAddModal({pageText: null})"></q-btn>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Edit" icon="edit" @click="openEditModal({pageText: 'Automatic root page for space ' + wiki_page_info.wikiSpace.wikiSpaceId})"></q-btn>
                        </div>
                    </div>
                    <div>
                        Automatic root page for space {{wiki_page_info.wikiSpace.wikiSpaceId}}
                    </div>
                </q-card-section>
                <q-card-section v-if="page_detail.pageLocation && is_page_present">
                    <div style="display:grid;">
                        <div>
                            <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Add" icon="add" @click="openAddModal({pageText: null})"></q-btn>
                           <q-btn color="blue" class="text-capitalize cursor-pointer float-right" outline dense label="Edit" icon="edit" @click="openEditModal(page_detail)"></q-btn>
                        </div>
                    </div>
                    <div v-if="wiki_page_info.wikiType == 'html'" v-html="page_detail.pageText"></div>
                    <div v-if="wiki_page_info.wikiType == 'md'" v-html="getHtmlForMD(page_detail.pageText)"></div>
                </q-card-section>
            </q-card>
        </div>

        <q-dialog id="edit_editor_id" maximized v-model="show_edit_model" @show="initializeEditor('#editEditor')">
          <q-card class="q-pa-none">
            <q-card-section>
              <div class="row q-px-md q-py-sm">
                <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                    Edit Page: {{ wiki_page_info.pageName }}
                </div>
                <div class="col-1">
                    <q-btn flat round dense icon="close" class="float-right" v-close-popup></q-btn>
                </div>
            </div>
            </q-card-section>
            <q-separator></q-separator>

            <q-card-section class="q-ma-md edit_page">
                <div style="border: 1px solid #c2c2c2;" id="editEditor"></div>
            </q-card-section>

            <q-separator></q-separator>
            <q-card-actions class="q-pa-md" align="left">
              <q-btn @click="editPage()" outline dense label="Update" class="text-capitalize q-mb-md" color="primary"></q-btn>
              <q-btn v-close-popup outline dense label="Cancel" class="text-capitalize q-mb-md" color="black"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>

        <q-dialog id="add_editor_id" maximized v-model="show_add_model" @show="initializeEditor('#addEditor')">
          <q-card class="q-pa-none">
            <q-card-section>
              <div class="row q-px-md q-py-sm">
                <div class="col-11 q-pt-sm text-h5 text-weight-bold">
                    Add Page <q-input style="width: 300px;" class="inline-block" outlined dense
        v-model="new_page_name" label="Page Name" />
                </div>
                <div class="col-1">
                    <q-btn flat round dense icon="close" class="float-right" v-close-popup></q-btn>
                </div>
            </div>
            </q-card-section>
            <q-separator></q-separator>

            <q-card-section class="q-ma-md edit_page">
                <div style="border: 1px solid #c2c2c2;" id="addEditor"></div>
            </q-card-section>

            <q-separator></q-separator>
            <q-card-actions class="q-pa-md" align="left">
              <q-btn @click="addPage()" outline dense label="Add" class="text-capitalize q-mb-md" color="primary"></q-btn>
              <q-btn v-close-popup outline dense label="Cancel" class="text-capitalize q-mb-md" color="black"></q-btn>
            </q-card-actions>
          </q-card>
        </q-dialog>

    </div>
</template>
<script>
module.exports = {
    data: function () {
        return {
            new_page_name: "",
            tree_nodes_selected: null,
            space_tree_data: [],
            wiki_page_info: {},
            is_page_present: false,
            page_detail: {},
            version: null,
            published_version: null,
            page_path: null,
            show_edit_model: false,
            show_add_model: false,
            obj_edit:{}
        }
    },
    methods: {
        openEditModal(item){
            let self = this;
            self.md_conv = new showdown.Converter({metadata: true});
            self.show_edit_model = true;
            self.obj_edit = item;
        },
        openAddModal(item){
            let self = this;
            self.md_conv = new showdown.Converter({metadata: true});
            self.show_add_model = true;
            self.obj_edit = item;
        },
        initializeEditor(elem) {
            let self = this;
            if (document.querySelector('.edit_page .ck-editor__editable')) {
                document.querySelector('.edit_page .ck-editor__editable').ckeditorInstance.destroy();
            }
            InlineEditor
            .create( document.querySelector( elem ), {})
            .then( editor => {
             if (elem === "#editEditor"){
                 window.edit_editor = editor;
                 if (self.wiki_page_info.wikiType == 'html' && self.obj_edit.pageText){
                    editor.setData(self.obj_edit.pageText);
                 }
                 else if (self.wiki_page_info.wikiType == 'md' && self.obj_edit.pageText){
                    editor.setData(self.getHtmlForMD(self.obj_edit.pageText));
                 }
                 else {
                    editor.setData("");
                 }
                $("#edit_editor_id").find('.q-dialog__inner').removeAttr('tabindex');
             }
             else {
                window.add_editor = editor;
                $("#add_editor_id").find('.q-dialog__inner').removeAttr('tabindex');
             }
         } )
        },
        addPage() {
          let self = this;
          var allParams = $.extend({wikiSpaceId: self.wiki_page_info.wikiSpaceId,
                                  parentPath: self.wiki_page_info.pagePath,
                                  pageName: self.new_page_name,
                                  wikiType: self.wiki_page_info.wikiType,
                                  moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
          if (self.wiki_page_info.wikiType == 'html') {
            allParams["pageText"] = self.getHtmlForMD(window.add_editor.getData());
          }
          else {
            allParams["pageText"] = window.add_editor.getData();
          }
          $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/updateWikiPage", headers:{Accept:'application/json'}, data:allParams,
              error:moqui.handleAjaxError, success:function(resp) {
                  self.show_add_model = false;
                  self.getWikiSpaceTree();
                  self.page_path = (self.wiki_page_info.pagePath ? (self.wiki_page_info.pagePath + "/"):'') + self.new_page_name;
                  self.tree_nodes_selected = (self.wiki_page_info.pagePath ? (self.wiki_page_info.pagePath + "/"):'') + self.new_page_name;
                  self.getWikiPageInfo();
                  self.new_page_name = "";
              }
          });
        },
        editPage() {
          let self = this;
          var allParams = $.extend({wikiSpaceId: self.wiki_page_info.wikiSpaceId,
                                  pagePath: self.wiki_page_info.pagePath,
                                  parentPath: self.wiki_page_info.parentPath,
                                  pageName: self.wiki_page_info.pageName,
                                  wikiType: self.wiki_page_info.wikiType,
                                  moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
          if (self.wiki_page_info.wikiType == 'html') {
            allParams["pageText"] = self.getHtmlForMD(window.edit_editor.getData());
          }
          else {
            allParams["pageText"] = window.edit_editor.getData();
          }
          $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/updateWikiPage", headers:{Accept:'application/json'}, data:allParams,
              error:moqui.handleAjaxError, success:function(resp) {
                  self.show_edit_model = false;
                  self.getWikiPageInfo();
              }
          });
        },
        getAssigneeList (search_keyword) {
            var self = this;
            var allParams = $.extend({ term: search_keyword,moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            return $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/users", headers:{Accept:'application/json'}, data:allParams,
                error:moqui.handleAjaxError
            });
        },
        getWikiSpaceTree() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId:params.wikiSpaceId,
                moquiSessionToken:self.$root.moquiSessionToken }, {});
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getWikiSpaceTree", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.space_tree_data = JSON.parse(JSON.stringify(resp.rootChildResourceList).replaceAll("childResourceList", "children"))
                        self.$nextTick(function () {
                            self.$refs.left_tree.expandAll();
                          })
                    }
                });
            }
        },
        getWikiPageInfo() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId, moquiSessionToken:self.$root.moquiSessionToken }, {});
                if (self.page_path) {
                    allParams["pagePath"] = self.page_path;
                }
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getWikiPageInfoById", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.wiki_page_info = resp;
                        if ('wikiPageId' in self.wiki_page_info) {
                            self.is_page_present = true;
                            self.version = self.wiki_page_info.currentVersionName;
                            self.published_version = self.wiki_page_info.publishedVersionName;
                            setTimeout( () => {
                                self.getPublishedWikiPageText();
                            }, 500 );
                        }
                    }
                });
            }
        },
        getHtmlForMD(content) {
            if (content) {
                return this.md_conv.makeHtml(content);
            }
        },
        treeNodeSelected(path) {
            this.page_path = path;
            this.page_detail = {};
            this.getWikiPageInfo();
        },
        getPublishedWikiPageText() {
            var self = this;
            const params = new Proxy(new URLSearchParams(window.location.search), {
              get: (searchParams, prop) => searchParams.get(prop),
            });
            if (params.wikiSpaceId) {
                self.md_conv = new showdown.Converter({metadata: true});
                var allParams = $.extend({ wikiSpaceId: params.wikiSpaceId,
                moquiSessionToken:self.$root.moquiSessionToken }, {});
                if (self.version) {
                    allParams["versionName"] = self.version;
                }
                if (self.page_path) {
                    allParams["pagePath"] = self.page_path;
                }
                $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/getPublishedWikiPageText", headers:{Accept:'application/json'}, data:allParams,
                    error:moqui.handleAjaxError, success:function(resp) {
                        self.page_detail = resp;
                    }
                });
            }
        }
    },
    created: function () {
        this.getWikiSpaceTree();
        this.getWikiPageInfo();
    }
}
</script>
<style>
    .custom_table_header {
        height: 45px !important;
    }
    .cls_space .q-field__label {
        top: 10px !important;
    }
    .cls_space .q-field--float .q-field__label {
        top: 0px !important;
    }
    .ck-editor__editable_inline {
        min-height: 70vh !important;
        height: 70vh !important;
    }
    .ck-editor {
        width: 100% !important;
        margin-bottom: 9px !important;
    }
    .ck-editor__editable {
        min-height: 150px !important;
    }
    .ck-balloon-panel_visible {
        z-index: 10000 !important;
    }
    .q-field__label {
        top: 10px !important;
    }
    .q-field--float .q-field__label {
        top: 0px !important;
    }
</style>
