<template>
    <div>
    <q-drawer
            side="right"
            v-model="open_task_detail"
            overlay
            bordered
            :width="700"
            :breakpoint="700"
            content-class="bg-grey-3"
            @show="initializeEditor"
          >
            <q-scroll-area class="fit">
              <div class="q-pa-sm">
                <q-layout v-if="selected_task" view="Lhh lpR fff" container class="bg-white" style="height: 85vh;">
                                    <q-header class="bg-white text-black">
                                      <q-toolbar>
                                        <q-btn class="q-px-sm q-ml-sm" outline dense icon="check" label="Mark complete"></q-btn>
                                        <q-toolbar-title></q-toolbar-title>
                                        <q-btn flat round dense icon="close" @click="open_task_detail=false"></q-btn>
                                      </q-toolbar>
                                    </q-header>

                                    <q-page-container>
                                      <q-page>
                                        <q-list class="bg-grey-2" bordered>
                                          <q-item>
                                            <q-item-section avatar>
                                              <q-icon color="primary" size="20px" name="lock"></q-icon>
                                            </q-item-section>
                                            <q-item-section> This task is private to you.</q-item-section>
                                            <q-item-section side>
                                                <q-btn @click="updateTask" class="text-blue q-px-sm q-ml-sm" outline dense icon="check" label="Update"></q-btn>
                                            </q-item-section>
                                          </q-item>
                                        </q-list>
                                        <div class="q-pa-md">
                                          <div class="text-weight-bold q-pb-sm q-pt-xs text-h6">
                                          <span v-if="!is_edit_title">{{selected_task.workEffortName}} <q-btn flat round dense icon="edit" @click="is_edit_title=true"></q-btn></span>
                                          <span v-if="is_edit_title">
                                          <q-input style="width: 350px" dense outlined v-model="selected_task.workEffortName">
                                            <template v-slot:after>
                                                <q-btn @click="updateTask" :disabled="!selected_task.workEffortName" square color="primary" size="md" icon="save" />
                                              </template>
                                          </q-input>
                                          </span>
                                          </div>
                                          <div class="cls_task_detail row text-grey-8">
                                            <div class="col-4">
                                              <q-select
                                                      label="Assignee"
                                                      dense
                                                      outlined
                                                      v-model="assignee"
                                                      use-input
                                                      input-debounce="0"
                                                      option-value="userId"
                                                      option-label="userFullName"
                                                      :options="assignee_options"
                                                      @filter="filterFn"
                                                      style="width: 200px"
                                                    >
                                                      <template v-slot:no-option>
                                                        <q-item>
                                                          <q-item-section class="text-grey">
                                                            No results
                                                          </q-item-section>
                                                        </q-item>
                                                      </template>
                                                    </q-select>
                                            </div>
                                            <div class="col-4">
                                              <q-select
                                                        label="Status"
                                                        dense
                                                        outlined
                                                        v-model="status"
                                                        use-input
                                                        input-debounce="0"
                                                        option-value="statusId"
                                                        option-label="description"
                                                        :options="status_options"
                                                        @filter="filterFnStatus"
                                                        style="width: 200px"
                                                      >
                                                        <template v-slot:no-option>
                                                          <q-item>
                                                            <q-item-section class="text-grey">
                                                              No results
                                                            </q-item-section>
                                                          </q-item>
                                                        </template>
                                                      </q-select>
                                            </div>
                                            <div class="col-4">
                                                <q-input label="Due Date" style="width: 200px" style="margin:0;padding:0;" outlined dense v-model="edit_due_date" mask="date" :rules="['date']">
                                                    <template v-slot:append>
                                                      <q-icon name="event" class="cursor-pointer">
                                                        <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                                          <q-date v-model="edit_due_date">
                                                            <div class="row items-center justify-end">
                                                              <q-btn v-close-popup label="Close" color="primary" flat />
                                                            </div>
                                                          </q-date>
                                                        </q-popup-proxy>
                                                      </q-icon>
                                                    </template>
                                                  </q-input>
                                            </div>
                                          </div>
                                          <div class="row text-grey-8 q-mt-lg">
                                            <div class="col-12">
                                                <div id="editor"></div>
                                            </div>
                                          </div>
                                        </div>
                                        <div v-if="sel_task_comments.length > 0">
                                            <q-list separator bordered>
                                              <q-item v-for="comment in sel_task_comments" class="q-my-sm">
                                                <q-item-section avatar>
                                                  <q-avatar color="primary" text-color="white">
                                                    {{ getInitials(getPersonName(comment.fromPartyId)) }}
                                                  </q-avatar>
                                                </q-item-section>

                                                <q-item-section class="q-pl-md">
                                                  <q-item-label class="text-subtitle1">{{ getPersonName(comment.fromPartyId) }} <span
                                                    class="q-pl-sm text-caption text-grey-8">{{ timeSince(comment.entryDate) }}</span></q-item-label>
                                                  <q-item-label v-if="obj_edit_comment.communicationEventId != comment.communicationEventId" class="q-pt-sm" caption><span class="text-weight-medium" v-html="comment.body"></span>
                                                  <span class="q-pl-sm text-caption text-grey-8"></span></q-item-label>

                                                <div class="q-mt-sm" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId">
                                                  <q-input
                                                        style="width: 100%"
                                                        v-model="obj_edit_comment.body"
                                                        dense
                                                        outlined
                                                        class="bg-white"
                                                        type="text"
                                                        placeholder="Edit comment..."
                                                      />
                                                  </div>

                                                </q-item-section>

                                                 <q-item-section side class="q-pt-sm">
                                                     <div>
                                                        <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId != comment.communicationEventId" @click="obj_edit_comment=comment;" class="text-blue q-px-sm q-ml-sm" flat dense icon="edit"></q-btn>
                                                        <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId" @click="updateComment();" class="text-blue q-px-sm q-ml-sm" outline flat dense icon="save"></q-btn>
                                                        <q-btn style="padding: 0;" v-if="obj_edit_comment.communicationEventId == comment.communicationEventId" @click="obj_edit_comment={};" class="text-red q-px-sm q-ml-sm" outline flat dense icon="close"></q-btn>
                                                        <q-btn style="padding: 0;" @click="obj_delete_comment=comment;is_delete_comment=true;" class="text-red q-px-sm q-ml-sm" flat dense icon="delete"></q-btn>
                                                    </div>
                                                 </q-item-section>

                                              </q-item>
                                              </q-list>
                                        </div>

                                        <q-dialog v-model="is_delete_comment" persistent>
                                          <q-card class="q-px-md q-pt-md">
                                            <q-card-section class="row items-center">
                                              <q-avatar size="md" icon="delete" color="primary" text-color="white"></q-avatar>
                                              <span class="q-ml-sm text-h6">Are you sure you want to delete?</span>
                                            </q-card-section>

                                            <q-card-actions align="right">
                                              <q-btn flat label="Cancel" @click="obj_delete_comment={};is_delete_comment=false;" color="primary"></q-btn>
                                              <q-btn flat label="Delete" color="red" @click="deleteComment"></q-btn>
                                            </q-card-actions>
                                          </q-card>
                                        </q-dialog>

                                      </q-page>
                                    </q-page-container>
                                <q-footer class="bg-grey-2 text-black">
                                      <div>
                                        <q-list separator bordered>
                                          <q-item class="q-my-sm">
                                            <q-item-section avatar>
                                              <q-avatar color="primary" text-color="white">
                                                {{ getInitials(logged_in_user.userFullName) }}
                                              </q-avatar>
                                            </q-item-section>
                                            <q-item-section>
                                              <q-input
                                                style="width: 100%"
                                                v-model="comment_body"
                                                outlined
                                                rows="3"
                                                class="bg-white"
                                                type="textarea"
                                                label="Add the comment..."
                                              />
                                            </q-item-section>
                                          </q-item>
                                          <q-item>
                                          <q-item-section side class="cursor-pointer">
                                                <q-btn @click="addComment" class="q-px-sm q-ml-sm" outline dense icon="check" label="Add Comment"></q-btn>
                                          </q-item-section>
                                          </q-item>

                                          <q-item>
                                            <q-item-section avatar>

                                            </q-item-section>
                                            <q-item-section>
                                              <div class="q-gutter-sm">
                                                <span class="text-caption text-grey-8 q-pt-sm q-mt-sm">Collaborators</span>
                                                <q-avatar size="24px" color="primary" text-color="white">
                                                  MP
                                                </q-avatar>
                                                <q-avatar style="border: 1px dashed;" size="24px" color="white" text-color="black" icon="person">
                                                </q-avatar>
                                                <q-avatar style="border: 1px dashed;" size="24px" color="white" text-color="black" icon="person">
                                                </q-avatar>
                                                <q-icon name="add" class="text-weight-bold"></q-icon>
                                              </div>
                                            </q-item-section>
                                            <q-item-section side class="cursor-pointer">
                                              <div class="cursor-pointer">
                                                <q-icon name="notifications" size="20px" class="text-weight-bold q-pr-xs"></q-icon>
                                                <span class="text-weight-bold">Leave task</span>
                                              </div>
                                            </q-item-section>
                                          </q-item>
                                        </q-list>
                                      </div>
                                    </q-footer>
                                  </q-layout>
              </div>
            </q-scroll-area>
          </q-drawer>
        <q-item>
              <q-item-section side>
                <q-avatar size="49px" color="primary" text-color="white">
                                                {{ getInitials(logged_in_user.userFullName) }}
                                              </q-avatar>
              </q-item-section>
              <q-item-section>
                <q-item-label class="text-h5">{{logged_in_user.userFullName}}</q-item-label>
                <q-item-label caption>
                </q-item-label>
              </q-item-section>
              <q-item-section class="cls_task_detail" side>
                <q-input label="Search" v-model="filter" dense rounded outlined>
                <template v-slot:prepend>
                                          <q-icon name="search" />
                                        </template>
                                        </q-input>
              </q-item-section>
            </q-item>
            <q-btn
            class="custom_btn_dropdown q-my-xs q-ml-sm"
            dense
                  split
                  @click="is_add_task=true"
                  color="primary"
                  no-caps
                  icon="add"
                  label="Add Task"
                >
                </q-btn>
                <q-expansion-item
                        default-opened
                        switch-toggle-side
                        flat
                        dense
                        label="All Tasks"
                        header-class="text-blue text-weight-bold text-h6"
                      >
                        <q-card>
                          <q-card-section style="padding-top: 0px;">
                            <q-table
                            bordered
                            flat
                                  :data="task_list"
                                  :filter="filter"
                                  table-header-class="custom_table_header"
                                  :columns="table_columns"
                                  row-key="notificationMessageId"
                                  separator="cell"
                                  dense
                                  :pagination="{
                                                       rowsPerPage: 10
                                                     }"
                                >
                                <template v-if="is_add_task" v-slot:top-row>
                                    <q-tr>
                                      <q-td style="padding: 0">
                                        <q-input v-model="new_task.title" autofocus square outlined style="margin:0;padding:0;" dense>
                                        <template v-slot:before>
                                          <q-icon @click="is_add_task=false" color="red" class="cursor-pointer q-ml-xs" name="close" />
                                        </template>
                                        </q-input>
                                      </q-td>
                                      <q-td style="padding: 0">
                                      <q-select
                                            dense
                                              outlined
                                              v-model="new_task.assignee"
                                              use-input
                                              square
                                              input-debounce="0"
                                              option-value="userId"
                                              option-label="userFullName"
                                              :options="assignee_options"
                                              @filter="filterFn"
                                              style="margin:0;padding:0;"
                                            >
                                              <template v-slot:no-option>
                                                <q-item>
                                                  <q-item-section class="text-grey">
                                                    No results
                                                  </q-item-section>
                                                </q-item>
                                              </template>
                                            </q-select></q-td>
                                      <q-td>In Planning</q-td>
                                      <q-td style="padding: 0 7px 0 0">
                                          <q-input style="margin:0;padding:0;" square outlined dense v-model="new_task.due_date" mask="date" :rules="['date']">
                                            <template v-slot:append>
                                              <q-icon name="event" class="cursor-pointer">
                                                <q-popup-proxy ref="qDateProxy" transition-show="scale" transition-hide="scale">
                                                  <q-date v-model="new_task.due_date">
                                                    <div class="row items-center justify-end">
                                                      <q-btn v-close-popup label="Close" color="primary" flat />
                                                    </div>
                                                  </q-date>
                                                </q-popup-proxy>
                                              </q-icon>
                                            </template>
                                            <template v-slot:after>
                                              <!--<q-icon @click="addTask" class="text-green" style="cursor: pointer;" class="q-mr-sm" name="check_circle" />-->
                                              <q-btn @click="addTask" :disabled="!new_task.title" square color="primary" size="md" icon="add_task" />
                                            </template>
                                          </q-input>
                                      </q-td>
                                    </q-tr>
                                  </template>
                                <template v-slot:body-cell-title-text="props">
                                          <q-td style="border-left: 5px solid #579bfc;padding:6px;" @click="selectTask(props.row)" class="cursor-pointer" :props="props">
                                            <span><q-icon name="check_circle_outline" class="cursor-pointer text-grey" style="font-size: 22px;" /></span>
                                            <span>{{props.row.workEffortName}}</span>
                                          </q-td>
                                        </template>
                                    <template v-slot:body-cell-duedate="props">
                                          <q-td :props="props">
                                            {{formatDate(props.row.estimatedCompletionDate)}}
                                          </q-td>
                                        </template>
                                        <template v-slot:body-cell-person="props">
                                          <q-td v-if="assignee_options_master.length > 0" :props="props">
                                            {{getPersonName(props.row.partyId)}}
                                          </q-td>
                                        </template>
                                        <template v-slot:body-cell-status="props">
                                          <q-td :props="props">
                                            <q-chip
                                              :style="'background-color: ' + status_color_map[props.row.statusId]"
                                              text-color="white"
                                              dense
                                              round
                                            > <span class="q-mr-xs" style="font-size:22px;">●</span> {{getStatusName(props.row.statusId)}}
                                            </q-chip>
                                          </q-td>
                                        </template>
                                </q-table>
                          </q-card-section>
                        </q-card>
                      </q-expansion-item>
    </div>
</template>
<script>
module.exports = {
    data: function () {
        return {
            logged_in_user: {},
            is_edit_title: false,
            task_list: [],
            sel_task_comments: [],
            edit_due_date: null,
            selected_task: {},
            open_task_detail: false,
            filter: "",
            new_task_assignee: null,
            new_task: {title: '', assignee: null, due_date: null},
            assignee: null,
            assignee_options_master: [],
            assignee_options: [],
            status: null,
            status_options_master: [],
            status_options: [],
            is_add_task: false,
            table_columns: [
               {
                 name: 'title-text',
                 field: 'workEffortName',
                 required: true,
                 label: 'Title',
                 align: 'left',
                 sortable: true,

               },
               { name: 'person', align: 'left', label: 'Person',style: 'width: 210px', field: 'partyId', sortable: true },
               { name: 'status', align: 'left', label: 'Status',style: 'width: 210px', field: 'statusId', sortable: true },
               { name: 'duedate', align: 'left', label: 'Due',style: 'width: 210px', field: 'estimatedCompletionDate', sortable: true }
            ],
            status_color_map:{WeInPlanning: '#979391', WeApproved: '#6a97ff', WeInProgress: '#f0b057', WeComplete: '#34d391', WeOnHold: '#e8697d',
                               WeClosed: '#79c947', WeCancelled: '#e8a19e'},
            comment_body:"",
            is_edit_comment:false,
            obj_edit_comment:{},
            is_delete_comment:false,
            obj_delete_comment:{}
        }
    },
    methods: {
        formatDate (dt) {
            if (dt) {
                dt = new Date(dt);
                return dt.getFullYear() + "-" + String(dt.getMonth()+1).padStart(2, '0') + "-" + String(dt.getDate()).padStart(2, '0');
            }
        },
        getPersonName(id) {
            if (id) {
                let user_full_name = this.assignee_options_master.find(function(item){
                    return item.userId === id;
                });
                if (user_full_name) {
                    return user_full_name.userFullName;
                }
            }
        },
        getStatusName(id) {
            if (id) {
                let status_name = this.status_options_master.find(function(item){
                    return item.statusId === id;
                });
                if (status_name) {
                    return status_name.description;
                }
            }
        },
        filterFn (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.assignee_options = self.assignee_options_master

                  // with Quasar v1.7.4+
                  // here you have access to "ref" which
                  // is the Vue reference of the QSelect
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.assignee_options = self.assignee_options_master.filter(v => v.userFullName.toLowerCase().indexOf(needle) > -1)
            })
          },
        filterFnStatus (val, update) {
            let self = this;
              if (val === '') {
                update(() => {
                  this.status_options = self.status_options_master

                  // with Quasar v1.7.4+
                  // here you have access to "ref" which
                  // is the Vue reference of the QSelect
                })
                return
              }
              update(() => {
              const needle = val.toLowerCase()
              this.status_options = self.status_options_master.filter(v => v.description.toLowerCase().indexOf(needle) > -1)
            })
          },
        fetchAllTasks (is_open_detail) {
            var self = this;
            var allParms = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val(), treeNodeId:'#' }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/tasks", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.task_list = resp.taskList.reverse();
                    if (is_open_detail) {
                        self.selectTask(self.task_list[0]);
                    }
                }
            });
        },
        selectTask (row) {
            var self = this;
            self.is_edit_title = false;
            self.selected_task = {};
            self.open_task_detail=true;
            self.selected_task=JSON.parse(JSON.stringify(row));
            if (self.selected_task.estimatedCompletionDate){
                self.edit_due_date = self.formatDate(self.selected_task.estimatedCompletionDate);
            }
            self.assignee = self.assignee_options_master.find(function(item){
                return item.userId === row.partyId;
            });
            self.status = self.status_options_master.find(function(item){
                return item.statusId === row.statusId;
            });
            self.sel_task_comments = [];
            self.getComments(row);

            if (document.querySelector('.ck-editor__editable')) {
                document.querySelector('.ck-editor__editable').ckeditorInstance.destroy();
            }
        },
        initializeEditor() {
            let self = this;
            ClassicEditor
            .create( document.querySelector( '#editor' ),
            {
                mention: {
                    feeds: [
                        {
                            marker: '@',
                            feed: getFeedItems,
                            itemRenderer: customItemRenderer
                        },
                    ]
                }
            })
            .then( editor => {
            MentionCustomization(editor);
             window.editor = editor;
             if (self.selected_task.description){
                editor.setData(self.selected_task.description);
             }
             else {
                editor.setData("");
             }
         } )
        },
        addTask () {
            var self = this;
            var allParms = $.extend({ workEffortName: self.new_task.title,
             assignToPartyId: (self.new_task.assignee ? self.new_task.assignee.userId:null), description: "", estimatedCompletionDate: self.new_task.due_date.replaceAll("/", "-"),
              moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/add_task", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.is_add_task=false;
                    self.new_task = {title: '', assignee: null, due_date: self.formatDate(new Date())};
                    self.fetchAllTasks(true);
                }
            });
        },
        updateTask() {
            let self = this;
            let params = self.selected_task;
            params["moquiSessionToken"] = $("#confMoquiSessionToken").val();
            params["assignToPartyId"] = (self.assignee ? self.assignee.userId:null);
            params["statusId"] = self.status.statusId;
            params["description"] = window.editor.getData();
            params["estimatedCompletionDate"] = self.edit_due_date.replaceAll("/", "-");
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/update_task", headers:{Accept:'application/json'}, data:params,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.is_edit_title = false;
                    self.fetchAllTasks();
                }
            });
        },
        getAssigneeList () {
            var self = this;
            var allParms = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val(), treeNodeId:'#' }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/users", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.assignee_options_master = resp.userList;
                    self.assignee_options = resp.userList;
                }
            });
        },
        getStatuses () {
            var self = this;
            var allParms = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val(), treeNodeId:'#' }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/statuses", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.status_options_master = resp.statusList;
                    self.status_options = resp.statusList;
                }
            });
        },
        addComment () {
            var self = this;
            var allParms = $.extend({ workEffortId: self.selected_task.workEffortId,
             body: self.comment_body,moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/add_comment", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.comment_body = "";
                    self.getComments(self.selected_task);
                }
            });
        },
        getComments(row) {
            var self = this;
            var allParms = $.extend({ workEffortId:row.workEffortId, moquiSessionToken:$("#confMoquiSessionToken").val(), treeNodeId:'#' }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/comments", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.sel_task_comments = resp.commentList.reverse();
                }
            });
        },
        updateComment() {
            var self = this;
            var allParms = $.extend({ workEffortId: self.selected_task.workEffortId,
             body: self.obj_edit_comment.body,communicationEventId:self.obj_edit_comment.communicationEventId,moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/update_comment", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.obj_edit_comment = {};
                    self.is_edit_comment = false;
                    self.getComments(self.selected_task);
                }
            });
        },
        deleteComment() {
            var self = this;
            var allParms = $.extend({ workEffortId: self.selected_task.workEffortId,
             communicationEventId:self.obj_delete_comment.communicationEventId,moquiSessionToken:$("#confMoquiSessionToken").val()}, {});
            $.ajax({ type:'POST', dataType:'json', url: "/rest/s1/wm/delete_comment", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.obj_delete_comment = {};
                    self.is_delete_comment = false;
                    self.getComments(self.selected_task);
                }
            });
        },
        timeSince(date) {

              var seconds = Math.floor((new Date() - date) / 1000);

              var interval = seconds / 31536000;

              if (interval > 1) {
                return Math.floor(interval) + " year(s) ago";
              }
              interval = seconds / 2592000;
              if (interval > 1) {
                return Math.floor(interval) + " month(s) ago";
              }
              interval = seconds / 86400;
              if (interval > 1) {
                return Math.floor(interval) + " day(s) ago";
              }
              interval = seconds / 3600;
              if (interval > 1) {
                return Math.floor(interval) + " hour(s) ago";
              }
              interval = seconds / 60;
              if (interval > 1) {
                return Math.floor(interval) + " minute(s) ago";
              }
              return Math.floor(seconds) + " second(s) ago";
        },
        fetchLoggedInUser() {
            let self = this;
            var allParms = $.extend({ moquiSessionToken:$("#confMoquiSessionToken").val() }, {});
            $.ajax({ type:'GET', dataType:'json', url: "/rest/s1/wm/logged_in_user", headers:{Accept:'application/json'}, data:allParms,
                error:moqui.handleAjaxError, success:function(resp) {
                    self.logged_in_user = resp.loggedInUser;
                }
            });
        },
        getInitials(name) {
            if (name) {
                let name_words = name.split(" ").slice(0, 2);
                final_initials = "";
                name_words.forEach(function(item){
                    final_initials += item[0];
                });
                return final_initials.toUpperCase();
            }
        }
    },
    mounted: function () {
        this.fetchLoggedInUser();
        this.new_task.due_date = this.formatDate(new Date());
        this.getAssigneeList();
        this.fetchAllTasks();
        this.getStatuses();
    }
}
</script>
<style>
    .custom_table_header {
        height: 38px !important;
    }
    .cls_task_detail .q-field__label {
        top: 10px !important;
    }
    .cls_task_detail .q-field--float .q-field__label {
        top: 0px !important;
    }
    .ck-balloon-panel_visible {
        z-index: 10000 !important;
    }
</style>
